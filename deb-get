#!/usr/bin/env bash
LC_ALL=C
PACKAGE_INSTALLATION_TRIES=0
PACKAGE_INSTALLATION_COUNT=0

readonly VERSION="0.3.6"

# set a github auth token (e.g a PAT ) in DEBGET_TOKEN to get a bigger rate limit
if [ -n "${DEBGET_TOKEN}" ]; then
    export HEADERAUTH="\"Authorization: token ${DEBGET_TOKEN}\""
    export HEADERPARAM="--header"
else
    unset HEADERAUTH
    unset HEADERPARAM
fi

function usage() {
cat <<HELP

Usage

deb-get {update | upgrade | show pkg | install pkg | reinstall pkg | remove pkg
        | purge pkg | search pkg | cache | clean | list | prettylist | csvlist
        | fix-installed [--old-apps] | help | version}

deb-get provides a high-level commandline interface for the package management
system to easily install and update packages published in 3rd party apt
repositories or via direct download.

update
    update is used to resynchronize the package index files from their sources.

upgrade
    upgrade is used to install the newest versions of all packages currently installed on the system.

install
    install is followed by one package desired for installation or upgrading.

reinstall
    reinstall is followed by one package desired for reinstallation.

remove
    remove is identical to install except that packages are removed instead of installed.

purge
    purge is identical to remove except that packages are removed and purged (any configuration files are deleted too).

clean
    clean clears out the local repository (/var/cache/deb-get) of retrieved package files.

search
    search for the given regex(7) term(s) from the list of available packages supported by deb-get and display matches.

show
    show information about the given package including its install source and update mechanism.

list
    list the packages available via deb-get.

prettylist
    markdown formatted list the packages available via deb-get. Use this to update README.md

csvlist
    csv formatted list the packages available via deb-get. Use this with 3rd party wrappers.

cache
    list the contents of the deb-get cache (/var/cache/deb-get)

fix-installed
    fix installed packages whose definitions were changed. When --old-apps is
    provided, transition packages to new format. This command is only intended
    for internal use.

help
    show this help

version
    show deb-get version

HELP
}

# https://github.com/wimpysworld/deb-get/issues/126
## BEGIN package_is_installed {
# Summary  : package_is_installed <package-name>;
# Purpose  : Quickly check if a package is installed
# Example  : package_is_installed kfocus-nvidia;
# Returns  : 0 = package installed; 1 = not installed
# Throws   : none
#
package_is_installed() {
  declare _pkg_name _status_str;
  _pkg_name="${1:-}";
  _status_str="$( 2>&1 \
    dpkg-query -f '${db:Status-abbrev}' -W "${_pkg_name}"
  )";
  if grep -qE '^.i ' <<< "${_status_str}"; then return 0; fi
  return 1;
}
## . END package_is_installed }

function elevate_privs() {
    if [ "$(id -ru)" -eq 0 ]; then
        # Alreday in the root context
        ELEVATE=""
    elif command -v doas 1>/dev/null; then
        ELEVATE="doas"
    elif command -v sudo 1>/dev/null; then
        ELEVATE="sudo"
    else
        fancy_message fatal "$(basename ${0}) requires sudo or doas to elevate permissions, neither were found."
    fi

    # Authenticate root context
    if [ -n "${ELEVATE}" ]; then
        ${ELEVATE} true
    fi
}

function unroll_url() {
    curl -w "%{url_effective}\n" -I -L -s -S "${1}" -o /dev/null
}

function get_github_releases() {
    METHOD="github"
    # Cache github releases json for 1 hour to try and prevent API rate limits
    #   https://docs.github.com/en/rest/overview/resources-in-the-rest-api#rate-limiting
    #   {"message":"API rate limit exceeded for 62.31.16.154. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
    #   curl -I https://api.github.com/users/flexiondotorg

    # Do not process github releases while generating a pretty list or upgrading
    if [ "${ACTION}" == "install" ] || [ "${ACTION}" == "update" ]; then
        fancy_message info "Updating ${CACHE_DIR}/${APP}.json"
        if [ ! -e "${CACHE_DIR}/${APP}.json" ] || test "$(find "${CACHE_DIR}/${APP}.json" -mmin +60)"; then
            wgetcmdarray=(${ELEVATE} wget  "${HEADERPARAM}" "${HEADERAUTH}" -q "${1}" -O "${CACHE_DIR}/${APP}.json")
            echo "${wgetcmdarray[@]}" | bash -  || ( fancy_message warn "Updating ${CACHE_DIR}/${APP}.json failed. Deleting it." ; ${ELEVATE} rm "${CACHE_DIR}/${APP}.json" 2>/dev/null )
            if [ -f "${CACHE_DIR}/${APP}.json" ] && grep "API rate limit exceeded" "${CACHE_DIR}/${APP}.json"; then
                fancy_message warn "Updating ${CACHE_DIR}/${APP}.json exceed GitHub API limits. Deleting it."
                ${ELEVATE} rm "${CACHE_DIR}/${APP}.json" 2>/dev/null
            fi
        fi
    fi
}

function fancy_message() {
    if [ -z "${1}" ] || [ -z "${2}" ]; then
      return
    fi

    local RED="\e[31m"
    local GREEN="\e[32m"
    local YELLOW="\e[33m"
    local MAGENTA="\e[35m"
    local RESET="\e[0m"
    local MESSAGE_TYPE=""
    local MESSAGE=""
    MESSAGE_TYPE="${1}"
    MESSAGE="${2}"

    case ${MESSAGE_TYPE} in
      info) echo -e "  [${GREEN}+${RESET}] ${MESSAGE}";;
      progress) echo -en "  [${GREEN}+${RESET}] ${MESSAGE}";;
      recommend) echo -e "  [${MAGENTA}!${RESET}] ${MESSAGE}";;
      warn) echo -e "  [${YELLOW}*${RESET}] WARNING! ${MESSAGE}";;
      error) echo -e "  [${RED}!${RESET}] ERROR! ${MESSAGE}" >&2;;
      fatal) echo -e "  [${RED}!${RESET}] ERROR! ${MESSAGE}" >&2
             exit 1;;
      *) echo -e "  [?] UNKNOWN: ${MESSAGE}";;
    esac
}

function download_deb() {
    local URL="${1}"
    local FILE="${URL##*/}"

    if ! ${ELEVATE} wget --quiet --continue --show-progress --progress=bar:force:noscroll "${URL}" -O "${CACHE_DIR}/${FILE}"; then
        fancy_message error "Failed to download ${URL}. Deleting ${CACHE_DIR}/${FILE}..."
        ${ELEVATE} rm "${CACHE_DIR}/${FILE}" 2>/dev/null
    fi
}

function eula() {
    if [ -n "${EULA}" ]; then
        echo -e "${EULA}"
        echo -e "\nDo you agree to the ${APP} EULA?"
        select yn in "Yes" "No"; do
            case $yn in
                Yes) break;;
                No) exit;;
            esac
        done
    fi
}

function update_apt() {
    ${ELEVATE} apt-get -q -o Dpkg::Progress-Fancy="1" -y update
}

function upgrade_apt() {
    ${ELEVATE} apt-get -q -o Dpkg::Progress-Fancy="1" -y upgrade
}

function install_apt() {
    let "PACKAGE_INSTALLATION_TRIES+=1"
    add_apt_repo
    update_apt

    if ! package_is_installed "${APP}"; then
        eula
        ${ELEVATE} apt-get -q=2 -o Dpkg::Progress-Fancy="1" -y install "${APP}"
    else
        if [ "${ACTION}" == "reinstall" ]; then
            ${ELEVATE} apt-get -q=2 -o Dpkg::Progress-Fancy="1" -y --reinstall --allow-downgrades install "${APP}"
        else
            fancy_message info "${APP} is up to date."
        fi
    fi
    let "PACKAGE_INSTALLATION_COUNT+=1"
}

function install_ppa() {
    ppa_to_apt
    install_apt
}

function install_deb() {
    local URL="${1}"
    local FILE="${URL##*/}"
    local STATUS=""
    let "PACKAGE_INSTALLATION_TRIES+=1"

    if ! package_is_installed "${APP}"; then
        eula
        download_deb "${URL}"
        ${ELEVATE} apt-get -q=2 -o Dpkg::Progress-Fancy="1" -y install "${CACHE_DIR}/${FILE}"
    else
        if [ "${ACTION}" == "reinstall" ]; then
            download_deb "${URL}"
            ${ELEVATE} apt-get -q=2 -o Dpkg::Progress-Fancy="1" -y --reinstall --allow-downgrades install "${CACHE_DIR}/${FILE}"
        elif dpkg --compare-versions "${VERSION_PUBLISHED}" gt "${VERSION_INSTALLED}"; then
            download_deb "${URL}"
            ${ELEVATE} apt-get -q=2 -o Dpkg::Progress-Fancy="1" -y install "${CACHE_DIR}/${FILE}"
        else
            fancy_message info "${FILE} is up to date."
        fi
    fi
    let "PACKAGE_INSTALLATION_COUNT+=1"
    if [ -f "${CACHE_DIR}/${FILE}" ]; then
        ${ELEVATE} rm "${CACHE_DIR}/${FILE}" 2>/dev/null
    fi
}

function remove_deb() {
    local APP="${1}"
    local REMOVE="${2:-remove}"
    local FILE="${URL##*/}"
    local STATUS=""

    if package_is_installed "${APP}"; then
        STATUS="$(dpkg -s "${APP}" | grep ^Status: | cut -d" " -f2-)"
        if [ "${STATUS}" == "deinstall ok config-files" ]; then
            REMOVE="purge"
        fi
        ${ELEVATE} apt-get -q -y --autoremove ${REMOVE} "${APP}"
    else
        fancy_message info "${APP} is not installed."
    fi

    # Remove repos/PPA/key even if the app is not installed.
    case ${METHOD} in
        direct|github|website)
            if [ -f "${CACHE_DIR}/${FILE}" ]; then
                fancy_message info "Removing ${CACHE_DIR}/${FILE}"
                ${ELEVATE} rm "${CACHE_DIR}/${FILE}" 2>/dev/null
            fi
            ;;
        apt)
            remove_apt_repo "${APT_LIST_NAME}";;
        ppa)
            remove_ppa_repo "${PPA}";;
    esac
}

function version_deb() {
    if package_is_installed "${APP}"; then
        echo "$(dpkg -s "${APP}" | grep ^Version: | cut -d' ' -f2)"
    else
        echo ""
    fi
}

function info_deb() {
    local INSTALLED="${VERSION_INSTALLED:-No}"
    case ${METHOD} in
        direct|github|website) echo -e "${PRETTY_NAME}\n  Package:\t${APP}\n  Updater:\tdeb-get\n  Installed:\t${INSTALLED}\n  Published:\t${VERSION_PUBLISHED}\n  Architecture:\t${ARCHS_SUPPORTED}\n  Download:\t${URL}\n  Website:\t${WEBSITE}\n  Summary:\t${SUMMARY}";;
        apt) echo -e "${PRETTY_NAME}\n  Package:\t${APP}\n  Updater:\tapt\n  Installed:\t${INSTALLED}\n  Architecture:\t${ARCHS_SUPPORTED}\n  Repository:\t${APT_REPO_URL}\n  Website:\t${WEBSITE}\n  Summary:\t${SUMMARY}";;
        ppa) echo -e "${PRETTY_NAME}\n  Package:\t${APP}\n  Updater:\tapt\n  Installed:\t${INSTALLED}\n  Architecture:\t${ARCHS_SUPPORTED}\n  Launchpad:\t${PPA}\n  Website:\t${WEBSITE}\n  Summary:\t${SUMMARY}";;
    esac
}

function validate_deb() {
    export APP="${1}"

    if [[ ! " ${APPS[*]} " =~ " ${APP} " ]]; then
        fancy_message error "${APP} is not a supported application."
        list_debs >&2
        exit 1
    fi

    export ASC_KEY_URL=""
    export GPG_KEY_URL=""
    export OLD_APT_LIST_NAME=""
    export APT_LIST_NAME=""
    export APT_REPO_URL=""
    export APT_REPO_OPTIONS=""
    export OLD_PPA=""
    export PPA=""
    export ARCHS_SUPPORTED="amd64"
    export CODENAMES_SUPPORTED=""
    export OLD_METHOD=""
    export METHOD="website"
    export EULA=""
    export URL=""
    export VERSION_INSTALLED=""
    export VERSION_PUBLISHED=""
    export PRETTY_NAME=""
    export SUMMARY=""
    export WEBSITE=""

    # Source the variables
    deb_${APP} 2>/dev/null
    if [ -z "${PRETTY_NAME}" ] || [ -z "${SUMMARY}" ] || [ -z "${WEBSITE}" ]; then
        fancy_message eror "Missing required information of package ${APP}:"
        echo "PRETTY_NAME=${PRETTY_NAME}" >&2
        echo "SUMMARY=${SUMMARY}" >&2
        echo "WEBSITE=${WEBSITE}" >&2
        exit 1
    fi
    VERSION_INSTALLED=$(version_deb)
    if [ -n "${APT_REPO_URL}" ]; then
        METHOD="apt"
        if [ "${ACTION}" != "prettylist" ]; then
            if [ -z "${APT_LIST_NAME}" ] || { [ -z "${ASC_KEY_URL}" ] && [ -z "${GPG_KEY_URL}" ]; }; then
                fancy_message error "Missing required information of apt package ${APP}:"
                echo "APT_LIST_NAME=${APT_LIST_NAME}" >&2
                echo "ASC_KEY_URL=${ASC_KEY_URL}" >&2
                echo "GPG_KEY_URL=${GPG_KEY_URL}" >&2
                exit 1
            fi
            if [ -n "${ASC_KEY_URL}" ] && [ -n "${GPG_KEY_URL}" ]; then
                fancy_message error "Conflicting repository key types for apt package ${APP}:"
                echo "ASC_KEY_URL=${ASC_KEY_URL}" >&2
                echo "GPG_KEY_URL=${GPG_KEY_URL}" >&2
                exit 1
            fi
        fi
    elif  [ -n "${PPA}" ]; then
        METHOD="ppa"
    else
        if { { [ "${METHOD}" = github ] && [ -e "${CACHE_DIR}/${APP}.json" ]; } || [ "${METHOD}" != github ]; } && [ "${ACTION}" != "prettylist" ] && { [ -z "${URL}" ] || [ -z "${VERSION_PUBLISHED}" ]; }; then
            fancy_message error "Missing required information of ${METHOD} package ${APP}:"
            echo "URL=${URL}" >&2
            echo "VERSION_PUBLISHED=${VERSION_PUBLISHED}" >&2
            exit 1
        fi
    fi
}

function list_debs() {
    local PAD='                              '
    local STATUS=""
    for APP in "${APPS[@]}"; do
        if package_is_installed "${APP}"; then
            STATUS="$(dpkg -s "${APP}" | grep ^Status: | cut -d" " -f4- )"
            printf "%s %s [ ${STATUS} ]\n" "${APP}" "${PAD:${#APP}}"
        else
            echo "${APP}"
        fi
    done
}

function prettylist_debs() {
    local ICON=""
    echo "| Source   | Package Name   | Description   |
| :------: | :------------- | :------------ |"
    for APP in "${APPS[@]}"; do
        validate_deb "${APP}"
        case ${METHOD} in
            apt)    ICON="debian.png";;
            github) ICON="github.png";;
            ppa)    ICON="launchpad.png";;
            *)      ICON="direct.png";;
        esac
        echo "| [<img src=\".github/${ICON}\" align=\"top\" width=\"20\" />](${WEBSITE}) | "'`'"${APP}"'`'" | <i>${SUMMARY}</i> |"
    done
}

function csvlist_debs() {
    for APP in "${APPS[@]}"; do
        validate_deb "${APP}"
        echo "\"${APP}\",\"${PRETTY_NAME}\",\"${VERSION_INSTALLED}\",\"${ARCHS_SUPPORTED}\",\"${METHOD}\",\"${SUMMARY}\""
    done
}

function update_debs() {
    local STATUS=""
    update_apt
    for APP in "${APPS[@]}"; do
        # Only download .debs that are installed
        if package_is_installed "${APP}"; then
            validate_deb "${APP}"
            if [ "${METHOD}" == "direct" ] || [ "${METHOD}" == "github" ] || [ "${METHOD}" == "website" ]; then
                STATUS="$(dpkg -s "${APP}" | grep ^Status: | cut -d" " -f2-)"
                if [ "${STATUS}" == "install ok installed" ] && dpkg --compare-versions "${VERSION_PUBLISHED}" gt "${VERSION_INSTALLED}"; then
                    fancy_message info "${APP} (${VERSION_INSTALLED}) has an update pending. ${VERSION_PUBLISHED} is available."
                fi
            fi
        fi
    done
}

function upgrade_debs() {
    local STATUS=""
    upgrade_apt
    for APP in "${APPS[@]}"; do
        # Only upgrade .debs that are installed
        if package_is_installed "${APP}"; then
            validate_deb "${APP}"
            if [ "${METHOD}" == "direct" ] || [ "${METHOD}" == "github" ] || [ "${METHOD}" == "website" ]; then
                STATUS="$(dpkg -s "${APP}" | grep ^Status: | cut -d" " -f2-)"
                if [ "${STATUS}" == "install ok installed" ]; then
                    install_deb "${URL}"
                fi
            fi
        fi
    done
}

function load_etc_includes() {
    if [ -d /etc/deb-get.d ]; then
        for INCLUDE_FILE in $(find /etc/deb-get.d -type f); do
            . $INCLUDE_FILE
        done
    fi
}

function unload_etc_includes() {
    for DEB_FUNC in "${INCLUDE_APPS[@]}"; do
        unset -f deb_${DEB_FUNC}
    done
}

function print_etc_overrides()
{
    if [ ${#INCLUDE_APPS[@]} -gt 0 ] || [ ${#APP_CONFLICTS[@]} -gt 0 ]; then

        DEB_GET_SCRIPT_FILE="${0}"

        # turn on source line debugging for declare -F
        shopt -s extdebug

        NUM_OLDER_CONFLICTS=0
        for DEB_FUNC in "${APP_CONFLICTS[@]}"; do
            # Find where the conflict is in the user includes
            DECLARE_F_DEBUG="$(declare -F deb_$DEB_FUNC)"
            INC_FILE="$(echo $DECLARE_F_DEBUG | cut -d" " -f3)"
            SRC_LINE="$(echo $DECLARE_F_DEBUG | cut -d" " -f2)"
            FUNC_SRC_REF="$INC_FILE:$SRC_LINE: function deb_$DEB_FUNC()"
            fancy_message warn "Conflict detected, duplicate declaration of function deb_$DEB_FUNC(), using custom override declared at $FUNC_SRC_REF"

            if [ "$DEB_GET_SCRIPT_FILE" -nt "$INC_FILE" ]; then
                let "NUM_OLDER_CONFLICTS+=1"
            fi
        done

        if [ $NUM_OLDER_CONFLICTS -gt 0 ]; then
            fancy_message recommend "Duplicate entr(ies) already merged upstream (if no longer needed), must be manually removed from your /etc/deb-get.d/* folder."
        fi

        for DEB_FUNC in "${INCLUDE_APPS[@]}"; do
            # Find where it was declared in the user includes
            DECLARE_F_DEBUG="$(declare -F deb_$DEB_FUNC)"
            INC_FILE="$(echo $DECLARE_F_DEBUG | cut -d" " -f3)"
            SRC_LINE="$(echo $DECLARE_F_DEBUG | cut -d" " -f2)"
            FUNC_SRC_REF="$INC_FILE:$SRC_LINE: function deb_$DEB_FUNC()"
            fancy_message info "Including custom override $FUNC_SRC_REF"
        done

        if [ ${#INCLUDE_APPS[@]} -gt 0 ]; then
            fancy_message recommend "Please consider contributing back new entries, an issue (or raise a PR) directly at https://github.com/wimpysworld/deb-get/pulls"
        fi

        # turn off source line debugging for declare -F
        shopt -u extdebug
    fi
}

readonly OLD_APPS=(quickemu firefox-esr quickgui nextcloud-desktop keepassxc ubuntu-make lutris polychromatic openrazer-meta strawberry copyq obs-studio foliate ulauncher yq fsearch kdiskmark xemu cryptomator gpu-viewer blanket audio-recorder papirus-icon-theme qownnotes retroarch texworks virtualbox-6.1 atom code 1password google-chrome-stable opera-stable teams enpass microsoft-edge-stable brave-browser docker-ce skypeforlinux wavebox wire-desktop signal-desktop syncthing sublime-text plexmediaserver jellyfin sublime-merge google-earth-pro-stable cawbird insync slack-desktop vivaldi-stable keybase protonvpn softmaker-office-2021 resilio-sync chronograf influxdb influxdb2 influxdb2-cli kapacitor telegraf anydesk azure-cli terraform nomad kopia-ui typora neo4j appimagelauncher)

function fix_installed() {
    if [ "${1}" = --old-apps ] && [[ " ${OLD_APPS[@]} " =~ " ${APP} " ]]; then
        if [ -n "${OLD_APT_LIST_NAME}" ]; then
            remove_old_apt_repo "${OLD_APT_LIST_NAME}"
        elif [ "${METHOD}" = apt ]; then
            remove_old_apt_repo "${APT_LIST_NAME}"
        elif [ -n "${OLD_PPA}" ]; then
            remove_old_ppa_repo "${OLD_PPA}"
        elif [ "${METHOD}" = ppa ]; then
            remove_old_ppa_repo "${PPA}"
        fi
        if [ "${METHOD}" = apt ]; then
            add_apt_repo
        elif [ "${METHOD}" = ppa ]; then
            ppa_to_apt
            add_apt_repo
        fi
    else
        if [ -n "${OLD_APT_LIST_NAME}" ]; then
            remove_apt_repo "${OLD_APT_LIST_NAME}"
        elif [ -n "${OLD_PPA}" ]; then
            remove_ppa_repo "${OLD_PPA}"
        fi
        if [ "${METHOD}" = apt ] && [ -n "${OLD_APT_LIST_NAME}${OLD_PPA}${OLD_METHOD}" ]; then
            add_apt_repo
        elif [ "${METHOD}" = ppa ] && [ -n "${OLD_APT_LIST_NAME}${OLD_PPA}${OLD_METHOD}" ]; then
            ppa_to_apt
            add_apt_repo
        fi
    fi
}

function remove_old_apt_repo() {
    fancy_message info "Removing /etc/apt/trusted.gpg.d/${1}.asc"
    ${ELEVATE} rm -f "/etc/apt/trusted.gpg.d/${1}.asc"
    fancy_message info "Removing /etc/apt/sources.list.d/${1}.list"
    ${ELEVATE} rm -f "/etc/apt/sources.list.d/${1}.list"
}

function remove_old_ppa_repo() {
    local -r PPA_ADDRESS="$(echo "${1}" | cut -d : -f 2)"
    local -r PPA_PERSON="$(echo "${PPA_ADDRESS}" | cut -d / -f 1)"
    local -r PPA_ARCHIVE="$(echo "${PPA_ADDRESS}" | cut -d / -f 2)"
    local -r APT_LIST_NAME="${PPA_PERSON}-ubuntu-${PPA_ARCHIVE}"
    fancy_message info "Removing /etc/apt/trusted.gpg.d/${APT_LIST_NAME}.gpg"
    ${ELEVATE} rm -f "/etc/apt/trusted.gpg.d/${APT_LIST_NAME}.gpg"
    ${ELEVATE} rm -f "/etc/apt/trusted.gpg.d/${APT_LIST_NAME}.gpg~"
    fancy_message info "Removing /etc/apt/sources.list.d/${APT_LIST_NAME}-${UPSTREAM_CODENAME}.list"
    ${ELEVATE} rm -f "/etc/apt/sources.list.d/${APT_LIST_NAME}-${UPSTREAM_CODENAME}.list"
}

function remove_apt_repo() {
    fancy_message info "Removing /usr/share/keyrings/${1}-archive-keyring.gpg"
    ${ELEVATE} rm -f "/usr/share/keyrings/${1}-archive-keyring.gpg"
    fancy_message info "Removing /etc/apt/sources.list.d/${1}.list"
    ${ELEVATE} rm -f "/etc/apt/sources.list.d/${1}.list"
}

function remove_ppa_repo() {
    local -r PPA_ADDRESS="$(echo "${1}" | cut -d : -f 2)"
    local -r PPA_PERSON="$(echo "${PPA_ADDRESS}" | cut -d / -f 1)"
    local -r PPA_ARCHIVE="$(echo "${PPA_ADDRESS}" | cut -d / -f 2)"
    local -r APT_LIST_NAME="${PPA_PERSON}-ubuntu-${PPA_ARCHIVE}-${UPSTREAM_CODENAME}"
    remove_apt_repo "${APT_LIST_NAME}"
}

function add_apt_repo() {
    if [ ! -d /usr/share/keyrings ]; then
        ${ELEVATE} mkdir -p /usr/share/keyrings 2>/dev/null
    fi
    if [ -n "${ASC_KEY_URL}" ]; then
        ${ELEVATE} wget -q "${ASC_KEY_URL}" -O "/usr/share/keyrings/${APT_LIST_NAME}-archive-keyring"
        ${ELEVATE} gpg --yes --dearmor "/usr/share/keyrings/${APT_LIST_NAME}-archive-keyring"
        ${ELEVATE} rm "/usr/share/keyrings/${APT_LIST_NAME}-archive-keyring"
    else #GPG_KEY_URL
        ${ELEVATE} wget -q "${GPG_KEY_URL}" -O "/usr/share/keyrings/${APT_LIST_NAME}-archive-keyring.gpg"
    fi

    #TODO: https://superuser.com/questions/1641291/gpg-only-download-a-key-from-a-keyserver

    local APT_LIST_LINE="deb [signed-by=/usr/share/keyrings/${APT_LIST_NAME}-archive-keyring.gpg"

    if [ -n "${APT_REPO_OPTIONS}" ]; then
        APT_LIST_LINE="${APT_LIST_LINE} ${APT_REPO_OPTIONS}"
    fi

    APT_LIST_LINE="${APT_LIST_LINE}] ${APT_REPO_URL}"
    echo "${APT_LIST_LINE}" | ${ELEVATE} tee "/etc/apt/sources.list.d/${APT_LIST_NAME}.list" > /dev/null
}

function ppa_to_apt() {
    local -r PPA_ADDRESS="$(echo "${PPA}" | cut -d : -f 2)"
    local -r PPA_PERSON="$(echo "${PPA_ADDRESS}" | cut -d / -f 1)"
    local -r PPA_ARCHIVE="$(echo "${PPA_ADDRESS}" | cut -d / -f 2)"
    export APT_REPO_URL="https://ppa.launchpadcontent.net/${PPA_ADDRESS}/ubuntu/ ${UPSTREAM_CODENAME} main"
    export APT_LIST_NAME="${PPA_PERSON}-ubuntu-${PPA_ARCHIVE}-${UPSTREAM_CODENAME}"
    export ASC_KEY_URL="https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x$(curl -s "https://api.launchpad.net/devel/~${PPA_PERSON}/+archive/ubuntu/${PPA_ARCHIVE}" | grep -o -E "\"signing_key_fingerprint\": \"[0-9A-F]+\"" | cut -d \" -f 4)"
}

# Import deb_ functions in /etc/deb-get.d/**/* (if exists)
load_etc_includes

# Make a seperate list of all deb_ functions loaded from /etc/deb-get.d/**/*
INCLUDE_APPS=($(declare -F | grep deb_ | sed 's|declare -f deb_||g' | sort))

# Immediately unload these custom includes before loading the official builtin deb_ functions
# (since after this point, declare -F cannot distinguish for us which deb_ came from which source)
unload_etc_includes

function deb_tixati() {
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(curl -s "https://www.tixati.com/download/linux.html" | grep "amd64\.deb\"" | head -n1 | cut -d'"' -f2)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="Tixati"
    WEBSITE="https://www.tixati.com/"
    SUMMARY="A New and Powerful P2P System."
}

function deb_discord() {
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(unroll_url "https://discord.com/api/download?platform=linux&format=deb")
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f6)"
    fi
    PRETTY_NAME="Discord"
    WEBSITE="https://discord.com/"
    SUMMARY="A place that makes it easy to talk every day and hang out more often."
}

function deb_quickemu() {
    PPA="ppa:flexiondotorg/quickemu"
    PRETTY_NAME="Quickemu"
    WEBSITE="https://github.com/quickemu-project/quickemu"
    SUMMARY="Quickly create and run optimised Windows, macOS and Linux desktop virtual machines."
}

function deb_virtualbox-6.1() {
    ARCHS_SUPPORTED="amd64"
    ASC_KEY_URL="https://www.virtualbox.org/download/oracle_vbox_2016.asc"
    APT_LIST_NAME="virtualbox-6.1"
    APT_REPO_URL="https://download.virtualbox.org/virtualbox/debian ${UPSTREAM_CODENAME} contrib"
    APT_REPO_OPTIONS="arch=amd64"
    PRETTY_NAME="VirtualBox 6.1"
    WEBSITE="https://www.virtualbox.org/"
    SUMMARY="VirtualBox 6.1 is a general-purpose full virtualizer for x86 hardware, targeted at server, desktop and embedded use."
}

function deb_firefox-esr() {
    PPA="ppa:mozillateam/ppa"
    PRETTY_NAME="Firefox ESR"
    WEBSITE="https://www.mozilla.org/firefox/enterprise/"
    SUMMARY=" Firefox Extended Support Release."
}

function deb_quickgui() {
    PPA="ppa:yannick-mauray/quickgui"
    PRETTY_NAME="Quickgui"
    WEBSITE="https://github.com/quickemu-project/quickgui"
    SUMMARY="A Flutter frontend for Quickemu."
}

function deb_nextcloud-desktop() {
    PPA="ppa:nextcloud-devs/client"
    PRETTY_NAME="Nextcloud Desktop"
    WEBSITE="https://nextcloud.com/"
    SUMMARY="The self-hosted productivity platform that keeps you in control."
}

function deb_keepassxc() {
    PPA="ppa:phoerious/keepassxc"
    PRETTY_NAME="KeePassXC"
    WEBSITE="https://keepassxc.org/"
    SUMMARY="Cross-Platform Password Manager."
}

function deb_ubuntu-make() {
    PPA="ppa:lyzardking/ubuntu-make"
    PRETTY_NAME="Ubuntu-Make"
    WEBSITE="https://github.com/ubuntu/ubuntu-make/"
    SUMMARY="Easy setup of common tools for developers on Ubuntu."
}

function deb_atom() {
    ASC_KEY_URL="https://packagecloud.io/AtomEditor/atom/gpgkey"
    APT_LIST_NAME="atom"
    APT_REPO_URL="https://packagecloud.io/AtomEditor/atom/any/ any main"
    APT_REPO_OPTIONS="arch=amd64"
    PRETTY_NAME="Atom"
    WEBSITE="https://atom.io/"
    SUMMARY="A hackable text editor for the 21st Century."
}

function deb_code() {
    ASC_KEY_URL="https://packages.microsoft.com/keys/microsoft.asc"
    APT_LIST_NAME="vscode"
    APT_REPO_URL="https://packages.microsoft.com/repos/vscode stable main"
    APT_REPO_OPTIONS="arch=amd64"
    PRETTY_NAME="Visual Studio Code"
    WEBSITE="https://code.visualstudio.com/"
    SUMMARY="Code editing. Redefined."
}

function deb_nala() {
    ARCHS_SUPPORTED="amd64 arm64 armhf i386"
    GPG_KEY_URL="https://deb.volian.org/volian/scar.key"
    APT_LIST_NAME="nala"
    APT_REPO_URL="http://deb.volian.org/volian/ scar main"
    APT_REPO_OPTIONS="arch=${HOST_ARCH}"
    PRETTY_NAME="Nala"
    WEBSITE="https://gitlab.com/volian/nala"
    SUMMARY="Commandline frontend for the APT package manager for Ubuntu 22.04 / Debian Sid and newer."
}

function deb_nala-legacy() {
    ARCHS_SUPPORTED="amd64 arm64 armhf i386"
    GPG_KEY_URL="https://deb.volian.org/volian/scar.key"
    APT_LIST_NAME="nala-legacy"
    APT_REPO_URL="http://deb.volian.org/volian/ scar main"
    APT_REPO_OPTIONS="arch=${HOST_ARCH}"
    PRETTY_NAME="Nala Legacy"
    WEBSITE="https://gitlab.com/volian/nala"
    SUMMARY="Commandline frontend for the APT package manager for Ubuntu 21.04 / Debian Stable and older."
}

function deb_rstudio() {
    if [ "${ACTION}" != "prettylist" ]; then
        case "${UPSTREAM_CODENAME}" in
            bionic | focal)
                URL="$(curl -s "https://www.rstudio.com/products/rstudio/download/" | grep -e "bionic/.*amd64.deb" | grep -v "tar.gz" | head -n1 | cut -d'"' -f2)"
                ;;
            *)
                URL="$(curl -s "https://www.rstudio.com/products/rstudio/download/" | grep -e "jammy/.*amd64.deb" | grep -v "tar.gz" | head -n1 | cut -d'"' -f2)"
                ;;
        esac
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'-' -f2-3 | tr - +)"
    fi
    PRETTY_NAME="RStudio"
    WEBSITE="https://www.rstudio.com/"
    SUMMARY="Professional software for data science teams."
}

function deb_beersmith3() {
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(curl -s "https://beersmith.com/download-beersmith/" | grep "amd64\.deb\"" | head -n1 | cut -d'"' -f2)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'-' -f3 | cut -d'_' -f1)"
    fi
    PRETTY_NAME="BeerSmith"
    WEBSITE="https://beersmith.com/"
    SUMMARY="Home Brewing Software."
}

function deb_ocenaudio() {
    ARCHS_SUPPORTED="amd64 i386"
    if [ "${ACTION}" != "prettylist" ]; then
        VERSION_PUBLISHED="$(curl -s "https://www.ocenaudio.com/en/download" | grep "<p>Version" | head -n1 | sed -e 's/<[^>]*>//g' | cut -d' ' -f2)"
    fi
    case ${HOST_ARCH} in
        amd64) URL="https://www.ocenaudio.com/downloads/index.php/ocenaudio_debian9_64.deb";;
        i386) URL="https://www.ocenaudio.com/downloads/index.php/ocenaudio_debian9_32.deb";;
    esac
    PRETTY_NAME="ocenaudio"
    WEBSITE="https://www.ocenaudio.com/"
    SUMMARY="Easy, fast and powerful audio editor."
}

function deb_github-desktop() {
    get_github_releases "https://api.github.com/repos/shiftkey/desktop/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 | sed 's|release-||')"
    fi
    PRETTY_NAME="GitHub Desktop"
    WEBSITE="https://desktop.github.com/"
    SUMMARY="Simple collaboration from your desktop."
}

function deb_helio-workstation() {
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(curl -s -f -L https://helio.fm |grep -o "https://..*\.deb"|grep -v dev)"
        VERSION_PUBLISHED="$(echo "${URL}" |cut -d '-' -f2)"
    fi
    PRETTY_NAME="Helio Project"
    WEBSITE="https://helio.fm/"
    SUMMARY="libre music composition software"
}

function deb_lsd() {
    ARCHS_SUPPORTED="amd64 arm64"
    get_github_releases "https://api.github.com/repos/Peltoche/lsd/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | grep -v musl | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="LSDeluxe"
    WEBSITE="https://github.com/Peltoche/lsd"
    SUMMARY="The next gen 'ls' command."
}

function deb_wraith-master() {
    get_github_releases "https://api.github.com/repos/serebit/wraith-master/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 | sed 's|release-||')"
    fi
    PRETTY_NAME="wraith-master"
    WEBSITE="https://github.com/serebit/wraith-master"
    SUMMARY="An application for controlling the RGB LEDs on AMD's Wraith stock coolers"
}

function deb_bat() {
    ARCHS_SUPPORTED="amd64 arm64 armhf"
    get_github_releases "https://api.github.com/repos/sharkdp/bat/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | grep -v musl | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="bat"
    WEBSITE="https://github.com/sharkdp/bat"
    SUMMARY="A 'cat' clone with wings."
}


function deb_du-dust() {
    ARCHS_SUPPORTED="amd64 i386"
    get_github_releases "https://api.github.com/repos/bootandy/dust/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | grep -v musl | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="du-dust"
    WEBSITE="https://github.com/bootandy/dust"
    SUMMARY="du + rust = dust. Like du but more intuitive."
}


function deb_git-delta() {
    ARCHS_SUPPORTED="amd64 arm64 armhf i386"
    get_github_releases "https://api.github.com/repos/dandavison/delta/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | grep -v musl | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="git-delta"
    WEBSITE="https://github.com/dandavison/delta"
    SUMMARY="A syntax-highlighting pager for 'git', 'diff', and 'grep' output."
}

function deb_teams-for-linux() {
    ARCHS_SUPPORTED="amd64 arm64 armv7l"
    get_github_releases "https://api.github.com/repos/IsmaelMartinez/teams-for-linux/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="teams-for-linux"
    WEBSITE="https://github.com/IsmaelMartinez/teams-for-linux"
    SUMMARY="unofficial Microsoft Teams for LInux"
}

function deb_fd() {
    ARCHS_SUPPORTED="amd64 arm64 armhf"
    get_github_releases "https://api.github.com/repos/sharkdp/fd/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | grep -v musl | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="fd"
    WEBSITE="https://github.com/sharkdp/fd"
    SUMMARY="A simple, fast and user-friendly alternative to 'find'."
}

function deb_duf() {
    ARCHS_SUPPORTED="amd64 arm64 armhf"
    get_github_releases "https://api.github.com/repos/muesli/duf/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        case "${HOST_ARCH}" in
            armhf) URL=$(grep "browser_download_url.*armv7\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
                   ;;
            *)     URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        esac
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="duf"
    WEBSITE="https://github.com/muesli/duf"
    SUMMARY="Disk Usage/Free Utility - a better 'df' alternative."
}

function deb_zenith() {
    get_github_releases "https://api.github.com/repos/bvaisvil/zenith/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="Zenith"
    WEBSITE="https://github.com/bvaisvil/zenith"
    SUMMARY="Sort of like 'top' or 'htop' but with zoom-able charts."
}

function deb_rclone() {
    ARCHS_SUPPORTED="amd64 arm64 armhf i386"
    get_github_releases "https://api.github.com/repos/rclone/rclone/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        case ${HOST_ARCH} in
            armhf)
                URL=$(grep "browser_download_url.*arm-v7\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
                ;;
            i386)
                URL=$(grep "browser_download_url.*386\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
                ;;
            *)
                URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
                ;;
        esac
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 | tr -d v)"
    fi
    PRETTY_NAME="Rclone"
    WEBSITE="https://rclone.org/"
    SUMMARY="Syncs your files to cloud storage."
}

function deb_hugo() {
    ARCHS_SUPPORTED="amd64 arm64"
    get_github_releases "https://api.github.com/repos/gohugoio/hugo/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | grep -v extended | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 | tr -d v)"
    fi
    PRETTY_NAME="Hugo"
    WEBSITE="https://gohugo.io/"
    SUMMARY="Open-source static site generator."
}

function deb_simplenote() {
    ARCHS_SUPPORTED="amd64 armhf i386"
    get_github_releases "https://api.github.com/repos/Automattic/simplenote-electron/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        case ${HOST_ARCH} in
            amd64|i386) URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4);;
            armhf) URL=$(grep "browser_download_url.*armhv7l\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4);;
        esac
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 | tr -d v)"
    fi
    PRETTY_NAME="Simplenote"
    WEBSITE="https://simplenote.com/"
    SUMMARY="The simplest way to keep notes."
}

function deb_peazip() {
    get_github_releases "https://api.github.com/repos/peazip/PeaZip/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | grep Qt5 | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8)"
    fi
    PRETTY_NAME="PeaZip"
    WEBSITE="https://peazip.github.io"
    SUMMARY="PeaZip is a free file archiver utility and extractor."
}

function deb_tribler() {
    get_github_releases "https://api.github.com/repos/Tribler/tribler/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*_all\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 | tr -d v)"
    fi
    PRETTY_NAME="Tribler"
    WEBSITE="https://www.tribler.org/"
    SUMMARY="An encrypted torrent client."
}

function deb_bottom() {
    get_github_releases "https://api.github.com/repos/ClementTsang/bottom/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8)"
    fi
    PRETTY_NAME="bottom"
    WEBSITE="https://github.com/ClementTsang/bottom"
    SUMMARY="Yet another cross-platform graphical process/system monitor."
}

function deb_element-desktop() {
    GPG_KEY_URL="https://packages.element.io/debian/element-io-archive-keyring.gpg"
    APT_LIST_NAME="element-io"
    APT_REPO_URL="https://packages.element.io/debian/ default main"
    PRETTY_NAME="Element"
    WEBSITE="https://element.io/"
    SUMMARY="Secure and independent communication, connected via Matrix."
}

function deb_1password() {
    ASC_KEY_URL="https://downloads.1password.com/linux/keys/1password.asc"
    APT_LIST_NAME="1password"
    APT_REPO_URL="https://downloads.1password.com/linux/debian/amd64 stable main"
    APT_REPO_OPTIONS="arch=amd64"
    PRETTY_NAME="1Password"
    WEBSITE="https://1password.com/"
    SUMMARY="The easiest way to store and use strong passwords."
}

function deb_weechat() {
    GPG_KEY_URL="https://weechat.org/dev/info/debian_repository_signing_key/"
    APT_LIST_NAME="weechat"
    APT_REPO_URL="https://weechat.org/${UPSTREAM_ID} ${UPSTREAM_CODENAME} main"
    PRETTY_NAME="WeeChat"
    WEBSITE="https://weechat.org/"
    SUMMARY="The extensible chat client."
}

function deb_jami() {
    GPG_KEY_URL="https://dl.jami.net/public-key.gpg"
    APT_LIST_NAME="jami"
    APT_REPO_URL="https://dl.jami.net/nightly/${UPSTREAM_ID}_${UPSTREAM_RELEASE}/ jami main"
    PRETTY_NAME="Jami"
    WEBSITE="https://jami.net/"
    SUMMARY="Share, freely and privately."
}

function deb_google-chrome-stable() {
    ASC_KEY_URL="https://dl.google.com/linux/linux_signing_key.pub"
    APT_LIST_NAME="google-chrome"
    APT_REPO_URL="https://dl.google.com/linux/chrome/deb/ stable main"
    APT_REPO_OPTIONS="arch=amd64"
    EULA="By downloading Chrome, you agree to the Google Terms of Service and Chrome and Chrome OS Additional Terms of Service\n - https://policies.google.com/terms\n - https://www.google.co.uk/intl/en/chrome/terms/"
    PRETTY_NAME="Google Chrome"
    WEBSITE="https://www.google.com/chrome/"
    SUMMARY="Fast, Secure Browser from Google."
}

function disabled_ungoogled-chromium() {
    APT_LIST_NAME="home-ungoogled_chromium.list"
    case "${UPSTREAM_CODENAME}" in
        focal)
            ASC_KEY_URL="https://download.opensuse.org/repositories/home:/ungoogled_chromium/Ubuntu_Focal/Release.key"
            APT_REPO_URL="http://download.opensuse.org/repositories/home:/ungoogled_chromium/Ubuntu_Focal/ /"
            ;;
        *)
            ASC_KEY_URL="https://download.opensuse.org/repositories/home:/ungoogled_chromium/Debian_Sid/Release.key"
            APT_REPO_URL="http://download.opensuse.org/repositories/home:/ungoogled_chromium/Debian_Sid/ /"
            ;;
    esac
    PRETTY_NAME="ungoogled-chromium"
    WEBSITE="https://github.com/Eloston/ungoogled-chromium"
    SUMMARY="Google Chromium, sans integration with Google."
}

function deb_opera-stable() {
    ASC_KEY_URL="https://deb.opera.com/archive.key"
    APT_LIST_NAME="opera-stable"
    APT_REPO_URL="https://deb.opera.com/opera-stable/ stable non-free"
    PRETTY_NAME="Opera"
    WEBSITE="https://www.opera.com/"
    SUMMARY="Faster, safer and smarter than default browsers."
}

function deb_teams() {
    ASC_KEY_URL="https://packages.microsoft.com/keys/microsoft.asc"
    APT_LIST_NAME="teams"
    APT_REPO_URL="https://packages.microsoft.com/repos/ms-teams stable main"
    APT_REPO_OPTIONS="arch=amd64"
    PRETTY_NAME="Microsoft Teams"
    WEBSITE="https://www.microsoft.com/microsoft-teams/group-chat-software"
    SUMMARY="Team chat and collaboration."
}

function deb_enpass() {
    ASC_KEY_URL="https://dl.sinew.in/keys/enpass-linux.key"
    APT_LIST_NAME="enpass"
    APT_REPO_URL="http://repo.sinew.in/ stable main"
    PRETTY_NAME="Enpass"
    WEBSITE="https://www.enpass.io/"
    SUMMARY="Remember one master password and let Enpass take care of the rest."
}

function deb_microsoft-edge-stable() {
    ASC_KEY_URL="https://packages.microsoft.com/keys/microsoft.asc"
    APT_LIST_NAME="microsoft-edge"
    APT_REPO_URL="https://packages.microsoft.com/repos/edge stable main"
    APT_REPO_OPTIONS="arch=amd64"
    PRETTY_NAME="Microsoft Edge"
    WEBSITE="https://www.microsoft.com/edge"
    SUMMARY="Fast and secure browser that helps you protect your data and save time and money."
}

function deb_brave-browser() {
    ASC_KEY_URL="https://brave-browser-apt-release.s3.brave.com/brave-core.asc"
    APT_LIST_NAME="brave-browser-release"
    APT_REPO_URL="https://brave-browser-apt-release.s3.brave.com/ stable main"
    APT_REPO_OPTIONS="arch=amd64"
    PRETTY_NAME="Brave"
    WEBSITE="https://brave.com/"
    SUMMARY="Browse privately. Search privately. And ditch Big Tech."
}

function deb_docker-ce() {
    ARCHS_SUPPORTED="amd64 arm64 armhf"
    ASC_KEY_URL="https://download.docker.com/linux/ubuntu/gpg"
    APT_LIST_NAME="docker"
    APT_REPO_URL="https://download.docker.com/linux/${UPSTREAM_ID} ${UPSTREAM_CODENAME} stable"
    APT_REPO_OPTIONS="arch=${HOST_ARCH}"
    PRETTY_NAME="Docker Engine"
    WEBSITE="https://www.docker.com/"
    SUMMARY="Open source containerization technology for building and containerizing your applications."
}

function deb_docker-desktop() {
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(curl -s "https://docs.docker.com/desktop/release-notes/" | grep "amd64\.deb" | grep -Eo 'https://[^ >]+' | cut -d'?' -f1 | tr -d '"' | head -n1)"
        VERSION_PUBLISHED=$(echo "${URL}" | cut -d'-' -f3)
    fi
    PRETTY_NAME="Docker Desktop"
    WEBSITE="https://www.docker.com/products/docker-desktop/"
    SUMMARY="The fastest way to containerize applications."
}

function deb_irccloud-desktop() {
    get_github_releases "https://api.github.com/repos/irccloud/irccloud-desktop/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="IRCCloud Desktop"
    WEBSITE="https://www.irccloud.com/"
    SUMMARY="IRCCloud desktop application."
}

function deb_system-monitoring-center() {
    ARCHS_SUPPORTED="amd64 arm64 armhf"
    get_github_releases "https://api.github.com/repos/hakandundar34coding/system-monitoring-center/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*all\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f4)"
    fi
    PRETTY_NAME="System Monitoring Center"
    WEBSITE="https://github.com/hakandundar34coding/system-monitoring-center"
    SUMMARY="Multi-featured system monitor."
}

function deb_minigalaxy() {
    ARCHS_SUPPORTED="amd64 arm64 armhf"
    get_github_releases "https://api.github.com/repos/sharkwouter/minigalaxy/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*all\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="Minigalaxy"
    WEBSITE="https://sharkwouter.github.io/minigalaxy/"
    SUMMARY="A simple GOG client for Linux."
}

function deb_min() {
    ARCHS_SUPPORTED="amd64 arm64 armv7l"
    get_github_releases "https://api.github.com/repos/minbrowser/min/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*min.*-${HOST_ARCH}.deb" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'-' -f2)"
    fi
    PRETTY_NAME="Min"
    WEBSITE="https://minbrowser.org"
    SUMMARY="A fast, minimal browser."
}


function deb_com.github.tkashkin.gamehub() {
    get_github_releases "https://api.github.com/repos/tkashkin/GameHub/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | grep -v '\-dev' | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 | sed 's|-master||')"
    fi
    PRETTY_NAME="GameHub"
    WEBSITE="https://tkashkin.github.io/projects/gamehub"
    SUMMARY="Unified library for all your games."
}

function deb_codium() {
    ARCHS_SUPPORTED="amd64 arm64 armhf"
    get_github_releases "https://api.github.com/repos/VSCodium/vscodium/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="VSCodium"
    WEBSITE="https://vscodium.com/"
    SUMMARY="Community-driven, freely-licensed binary distribution of Microsoft's Code editor."
}

function deb_micro() {
    get_github_releases "https://api.github.com/repos/zyedidia/micro/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 | tr -d v)"
    fi
    PRETTY_NAME="micro"
    WEBSITE="https://micro-editor.github.io/"
    SUMMARY="A modern and intuitive terminal-based text editor."
}

function deb_ludo() {
    ARCHS_SUPPORTED="amd64 armhf"
    get_github_releases "https://api.github.com/repos/libretro/ludo/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | grep -v altui | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 | tr -d v)"
    fi
    PRETTY_NAME="Ludo"
    WEBSITE="https://ludo.libretro.com/"
    SUMMARY="A minimalist frontend for emulators."
}

function deb_obsidian() {
    get_github_releases "https://api.github.com/repos/obsidianmd/obsidian-releases/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="Obsidian"
    WEBSITE="https://obsidian.md/"
    SUMMARY="A powerful knowledge base on top of a local folder of plain text Markdown files."
}

function deb_mpdevil() {
    get_github_releases "https://api.github.com/repos/SoongNoonien/mpdevil/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="mpdevil"
    WEBSITE="https://github.com/SoongNoonien/mpdevil"
    SUMMARY="A simple music browser for MPD."
}

function deb_rambox() {
    get_github_releases "https://api.github.com/repos/ramboxapp/download/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*x64\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 | tr -d v)"
    fi
    PRETTY_NAME="Rambox"
    WEBSITE="https://rambox.app/"
    SUMMARY="Workspace simplifier."
}

function deb_antimicrox() {
    get_github_releases "https://api.github.com/repos/AntiMicroX/antimicrox/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_CPU}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8)"
    fi
    PRETTY_NAME="AntiMicroX"
    WEBSITE="https://antimicrox.github.io/"
    SUMMARY="A graphical program used to map keyboard buttons and mouse controls to a gamepad."
}

function deb_franz() {
    get_github_releases "https://api.github.com/repos/meetfranz/franz/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="Franz"
    WEBSITE="https://meetfranz.com/"
    SUMMARY="A messaging app for WhatsApp, Facebook Messenger, Slack, Telegram and many many more."
}

function deb_heroic() {
    get_github_releases "https://api.github.com/repos/Heroic-Games-Launcher/HeroicGamesLauncher/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | grep -v beta | head -n1 | cut -d'"' -f4)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="Heroic Games Launcher"
    WEBSITE="https://heroicgameslauncher.com/"
    SUMMARY="An Open Source GOG and Epic games launcher."
}

function deb_deb-get() {
    ARCHS_SUPPORTED="amd64 arm64 armhf i386"
    get_github_releases "https://api.github.com/repos/wimpysworld/deb-get/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(grep "browser_download_url.*\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="deb-get"
    WEBSITE="https://github.com/wimpysworld/deb-get"
    SUMMARY="'apt-get' functionality for .debs published in 3rd party repositories or via direct download package."
}

function deb_deborah() {
    CODENAMES_SUPPORTED="focal jammy kinetic"
    ARCHS_SUPPORTED="amd64"
    get_github_releases "https://api.github.com/repos/ymauray/deborah/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${UPSTREAM_CODENAME}.*_${HOST_ARCH}.deb" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 | tr -d v)"
    fi
    PRETTY_NAME="Deborah"
    WEBSITE="https://github.com/ymauray/deborah/"
    SUMMARY="A Flutter front-end for deb-get."
}

function deb_skypeforlinux() {
    ASC_KEY_URL="https://repo.skype.com/data/SKYPE-GPG-KEY"
    APT_LIST_NAME="skype-stable"
    APT_REPO_URL="https://repo.skype.com/deb stable main"
    APT_REPO_OPTIONS="arch=amd64"
    PRETTY_NAME="Skype"
    WEBSITE="https://www.skype.com/"
    SUMMARY="Stay connected with free video calls worldwide."
}

function deb_waydroid() {
    GPG_KEY_URL="https://repo.waydro.id/waydroid.gpg"
    APT_LIST_NAME="waydroid"
    APT_REPO_URL="https://repo.waydro.id ${UPSTREAM_CODENAME} main"
    PRETTY_NAME="WayDroid"
    WEBSITE="https://waydro.id/"
    SUMMARY="A container-based approach to boot a full Android system on a regular GNU/Linux system like Ubuntu."
}

function deb_wavebox() {
    ASC_KEY_URL="https://wavebox.pro/dl/client/repo/archive.key"
    APT_LIST_NAME="wavebox-stable"
    APT_REPO_URL="https://download.wavebox.app/stable/linux/deb/ amd64/"
    APT_REPO_OPTIONS="arch=amd64"
    PRETTY_NAME="Wavebox"
    WEBSITE="https://wavebox.io/"
    SUMMARY="Rethink the Web. Productivity Browser."
}

function deb_wire-desktop() {
    ASC_KEY_URL="https://wire-app.wire.com/linux/releases.key"
    APT_LIST_NAME="wire-desktop"
    APT_REPO_URL="https://wire-app.wire.com/linux/debian stable main"
    APT_REPO_OPTIONS="arch=amd64"
    PRETTY_NAME="Wire"
    WEBSITE="https://wire.com/"
    SUMMARY="Secure collaboration platform."
}

function deb_signal-desktop() {
    ASC_KEY_URL="https://updates.signal.org/desktop/apt/keys.asc"
    APT_LIST_NAME="signal-xenial.list"
    APT_REPO_URL="https://updates.signal.org/desktop/apt xenial main"
    APT_REPO_OPTIONS="arch=amd64"
    PRETTY_NAME="Signal"
    WEBSITE="https://signal.org/"
    SUMMARY="Private Messenger."
}

function deb_syncthing() {
    ASC_KEY_URL="https://syncthing.net/release-key.txt"
    APT_LIST_NAME="syncthing"
    APT_REPO_URL="https://apt.syncthing.net/ syncthing release"
    PRETTY_NAME="Syncthing"
    WEBSITE="https://syncthing.net/"
    SUMMARY="Continuous file synchronization program."
}

function deb_sublime-text() {
    ASC_KEY_URL="https://download.sublimetext.com/sublimehq-pub.gpg"
    APT_LIST_NAME="sublime-text"
    APT_REPO_URL="https://download.sublimetext.com/ apt/stable/"
    PRETTY_NAME="Sublime Text"
    WEBSITE="https://www.sublimetext.com/"
    SUMMARY="Text Editing, Done Right."
}

function deb_plexmediaserver() {
    ARCHS_SUPPORTED="amd64 arm64 armhf i386"
    ASC_KEY_URL="https://downloads.plex.tv/plex-keys/PlexSign.key"
    APT_LIST_NAME="plexmediaserver"
    APT_REPO_URL="https://downloads.plex.tv/repo/deb public main"
    PRETTY_NAME="Plex"
    WEBSITE="https://www.plex.tv/"
    SUMMARY="Stream Movies and TV Shows."
}

function deb_jellyfin() {
    ARCHS_SUPPORTED="amd64 arm64 armhf"
    ASC_KEY_URL="https://repo.jellyfin.org/ubuntu/jellyfin_team.gpg.key"
    APT_LIST_NAME="jellyfin"
    APT_REPO_URL="https://repo.jellyfin.org/${UPSTREAM_ID} ${UPSTREAM_CODENAME} main"
    APT_REPO_OPTIONS="arch=${HOST_ARCH}"
    PRETTY_NAME="Jellyfin"
    WEBSITE="https://jellyfin.org/"
    SUMMARY="The Free Software Media System."
}

function deb_pandoc() {
    ARCHS_SUPPORTED="amd64 arm64"
    get_github_releases "https://api.github.com/repos/jgm/pandoc/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'-' -f2)"
    fi
    PRETTY_NAME="Pandoc"
    WEBSITE="https://pandoc.org/"
    SUMMARY="A universal document converter."
}
function deb_sublime-merge() {
    ASC_KEY_URL="https://download.sublimetext.com/sublimehq-pub.gpg"
    APT_LIST_NAME="sublime-text"
    APT_REPO_URL="https://download.sublimetext.com/ apt/stable/"
    PRETTY_NAME="Sublime Merge"
    WEBSITE="https://www.sublimemerge.com/"
    SUMMARY="Git Client, done Sublime."
}

function deb_google-earth-pro-stable() {
    ASC_KEY_URL="https://dl-ssl.google.com/linux/linux_signing_key.pub"
    APT_LIST_NAME="google-earth-pro"
    APT_REPO_URL="https://dl.google.com/linux/earth/deb/ stable main"
    APT_REPO_OPTIONS="arch=amd64"
    PRETTY_NAME="Google Earth Pro"
    WEBSITE="https://www.google.com/earth/versions/"
    SUMMARY="Explore worldwide satellite imagery and 3D buildings and terrain for hundreds of cities."
}

function deb_cawbird() {
    # Captialise first character of UPSTREAM_ID and prefeix with 'x' for Ubuntu
    local OBS_UPSTREAM_ID="${UPSTREAM_ID^}"
    if [ "${OBS_UPSTREAM_ID}" == "Ubuntu" ]; then
        OBS_UPSTREAM_ID="x${OBS_UPSTREAM_ID}"
    fi

    ASC_KEY_URL="https://download.opensuse.org/repositories/home:IBBoard:cawbird/${OBS_UPSTREAM_ID}_${UPSTREAM_RELEASE}/Release.key"
    APT_LIST_NAME="home:IBBoard:cawbird"
    APT_REPO_URL="https://download.opensuse.org/repositories/home:/IBBoard:/cawbird/${OBS_UPSTREAM_ID}_${UPSTREAM_RELEASE}/ /"
    PRETTY_NAME="Cawbird"
    WEBSITE="https://ibboard.co.uk/cawbird/"
    SUMMARY="Twitter client for the Linux desktop."
}

function deb_insync() {
    if [ "${ACTION}" != "prettylist" ]; then
        ASC_KEY_URL="$(curl -s https://www.insynchq.com/downloads | grep gpgkey | cut -d'=' -f2)"
    fi
    APT_LIST_NAME="insync"
    APT_REPO_URL="http://apt.insync.io/${UPSTREAM_ID} ${UPSTREAM_CODENAME} non-free contrib"
    PRETTY_NAME="Insync"
    WEBSITE="https://www.insynchq.com/"
    SUMMARY="Manage your Google Drive, OneDrive, and Dropbox files straight from your Desktop."
}

function deb_balena-etcher-electron() {
    ARCHS_SUPPORTED="amd64 i386"
    get_github_releases "https://api.github.com/repos/balena-io/etcher/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="Etcher"
    WEBSITE="https://www.balena.io/etcher/"
    SUMMARY="Flash OS images to SD cards & USB drives, safely and easily."
}

function deb_caprine() {
    get_github_releases "https://api.github.com/repos/sindresorhus/caprine/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="Caprine"
    WEBSITE="https://sindresorhus.com/caprine"
    SUMMARY="Elegant Facebook Messenger desktop app."
}

function disable_sengi() {
    get_github_releases "https://api.github.com/repos/NicolasConstant/sengi/releases"
    VERSION_PUBLISHED="$(grep "browser_download_url.*linux\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4 | cut -d'/' -f8)"
    URL=$(grep "browser_download_url.*linux\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
    PRETTY_NAME="Sengi"
    WEBSITE="https://github.com/NicolasConstant/sengi"
    SUMMARY="Tweetdeck inspired Mastodon & Pleroma Multi-account Desktop Client."
}

function deb_figma-linux() {
    ARCHS_SUPPORTED="amd64 arm64"
    get_github_releases "https://api.github.com/repos/Figma-Linux/figma-linux/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="Figma Linux"
    WEBSITE="https://github.com/Figma-Linux/figma-linux"
    SUMMARY="Unofficial Electron-based Figma desktop app for Linux."
}

function deb_rpi-imager() {
    get_github_releases "https://api.github.com/repos/raspberrypi/rpi-imager/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="Raspberry Pi Imager"
    WEBSITE="https://github.com/raspberrypi/rpi-imager"
    SUMMARY="Raspberry Pi Imaging Utility."
}

function deb_bitwarden() {
    get_github_releases "https://api.github.com/repos/bitwarden/clients/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 | tr -d desktop-v-)"
    fi
    PRETTY_NAME="Bitwarden"
    WEBSITE="https://bitwarden.com/"
    SUMMARY="Open Source Password Manager."
}

function deb_insomnia() {
    get_github_releases "https://api.github.com/repos/Kong/insomnia/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(grep "browser_download_url.*\.deb\"" "${CACHE_DIR}/${APP}.json" | grep -v beta | head -n1 | cut -d'"' -f4)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'-' -f2 | sed s'|\.deb||')"
    fi
    PRETTY_NAME="Insomnia"
    WEBSITE="https://insomnia.rest/"
    SUMMARY="The API Design Platform and API Client."
}

function deb_onlyoffice-desktopeditors() {
    get_github_releases "https://api.github.com/repos/ONLYOFFICE/DesktopEditors/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(grep "browser_download_url.*\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 | tr -d v)"
    fi
    PRETTY_NAME="ONLYOFFICE Desktop Editors"
    WEBSITE="https://www.onlyoffice.com/en/desktop.aspx"
    SUMMARY="Free desktop office suite for document editing and collaboration."
}

function deb_powershell() {
    get_github_releases "https://api.github.com/repos/PowerShell/PowerShell/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(grep "browser_download_url.*\.deb\"" "${CACHE_DIR}/${APP}.json" | grep -v -e preview -e lts | head -n1 | cut -d'"' -f4)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="PowerShell"
    WEBSITE="https://docs.microsoft.com/powershell/"
    SUMMARY="Cross-platform automation and configuration tool/framework and optimized for dealing with structured data."
}

function deb_mailspring() {
    get_github_releases "https://api.github.com/repos/Foundry376/Mailspring/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8)"
    fi
    PRETTY_NAME="Mailspring"
    WEBSITE="https://getmailspring.com/"
    SUMMARY="Boost your productivity and send better email with the best mail client."
}

function deb_mattermost-desktop() {
    get_github_releases "https://api.github.com/repos/mattermost/desktop/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        VERSION_PUBLISHED="$(grep "browser_download_url" "${CACHE_DIR}/${APP}.json" | grep -v -e rc | head -n1 | cut -d'"' -f4 | cut -d'/' -f8 | tr -d v)"
        URL="$(curl https://github.com/mattermost/desktop/releases/ | grep "//releases.*${VERSION_PUBLISHED}.*${HOST_ARCH}\.deb\"" | head -n 1 | cut -d\" -f 2)"
    fi
    PRETTY_NAME="Mattermost Desktop"
    WEBSITE="https://mattermost.com/"
    SUMMARY="Open Source platform for developer collaboration."
}

function deb_rocketchat() {
    get_github_releases "https://api.github.com/repos/RocketChat/Rocket.Chat.Electron/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8)"
    fi
    PRETTY_NAME="Rocketchat Desktop"
    WEBSITE="https://rocket.chat/"
    SUMMARY="Official Desktop Client for Rocket.Chat."
}

function deb_whatsapp-for-linux() {
    get_github_releases "https://api.github.com/repos/eneshecan/whatsapp-for-linux/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="WhatsApp for Linux"
    WEBSITE="https://github.com/eneshecan/whatsapp-for-linux"
    SUMMARY="An unofficial WhatsApp desktop application for Linux."
}

function deb_igdm() {
    get_github_releases "https://api.github.com/repos/igdmapps/igdm/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="IGdm Messenger"
    WEBSITE="https://github.com/igdmapps/igdm"
    SUMMARY="Continue your Instagram direct messages from your phone to your desktop."
}

# Upstream login bug
function disabled_igdm-pro() {
    get_github_releases "https://api.github.com/repos/igdmapps/igdm-pro-release/releases"
    VERSION_PUBLISHED="$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4 | cut -d'_' -f2)"
    URL="$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)"
    PRETTY_NAME="IGdm Pro Messenger"
    WEBSITE="https://pro.igdm.me/"
    SUMMARY="Continue your Instagram direct messages from your phone to your desktop."
}

function deb_whalebird() {
    get_github_releases "https://api.github.com/repos/h3poteto/whalebird-desktop/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(grep "browser_download_url.*x64\.deb\"" "${CACHE_DIR}/${APP}.json" | grep -v beta | head -n1 | cut -d'"' -f4)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8)"
    fi
    PRETTY_NAME="Whalebird"
    WEBSITE="https://whalebird.social/"
    SUMMARY="A Mastodon, Pleroma, and Misskey client for desktop application."
}

function deb_syft() {
    ARCHS_SUPPORTED="amd64 arm64"
    get_github_releases "https://api.github.com/repos/anchore/syft/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="Syft"
    WEBSITE="https://github.com/anchore/syft"
    SUMMARY="CLI tool and library for generating a Software Bill of Materials from container images and filesystems."
}

function deb_grype() {
    ARCHS_SUPPORTED="amd64 arm64"
    get_github_releases "https://api.github.com/repos/anchore/grype/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="Grype"
    WEBSITE="https://github.com/anchore/grype"
    SUMMARY="A vulnerability scanner for container images and filesystems."
}

function deb_trivy() {
    ARCHS_SUPPORTED="amd64 arm64 armhf i386"
    get_github_releases "https://api.github.com/repos/aquasecurity/trivy/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        case ${HOST_ARCH} in
            amd64)
                URL="$(grep "browser_download_url.*64bit\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)"
                ;;
            arm64)
                URL="$(grep "browser_download_url.*ARM64\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)"
                ;;
            armhf)
                URL="$(grep "browser_download_url.*ARM\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)"
                ;;
            i386)
                URL="$(grep "browser_download_url.*32bit\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)"
                ;;
        esac
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="Trivy"
    WEBSITE="https://aquasecurity.github.io/trivy/"
    SUMMARY="A simple and comprehensive vulnerability/misconfiguration/secret scanner for containers and other artifacts."
}

function deb_gitter() {
    if [ "${ACTION}" != "prettylist" ]; then
        VERSION_PUBLISHED="$(curl -s "https://gitlab.com/gitterHQ/desktop/-/raw/master/CHANGELOG.md" | head -n1 | cut -d'`' -f2)"
        case ${HOST_ARCH} in
            amd64) URL="https://update.gitter.im/linux64/gitter_${VERSION_PUBLISHED}_${HOST_ARCH}.deb";;
            i386) URL="https://update.gitter.im/linux32/gitter_${VERSION_PUBLISHED}_${HOST_ARCH}.deb";;
        esac
    fi
    PRETTY_NAME="Gitter"
    WEBSITE="https://gitter.im/"
    SUMMARY="A chat and networking platform to manage and connect communities through messaging, content and discovery."
}

function deb_slack-desktop() {
    ASC_KEY_URL="https://packagecloud.io/slacktechnologies/slack/gpgkey"
    APT_LIST_NAME="slack"
    APT_REPO_URL="https://packagecloud.io/slacktechnologies/slack/debian/ jessie main"
    PRETTY_NAME="Slack"
    WEBSITE="https://slack.com/"
    SUMMARY="One platform for your team and your work."
}

function deb_vivaldi-stable() {
    ARCHS_SUPPORTED="amd64 arm64 armhf"
    ASC_KEY_URL="https://repo.vivaldi.com/stable/linux_signing_key.pub"
    APT_LIST_NAME="vivaldi"
    APT_REPO_URL="https://repo.vivaldi.com/stable/deb/ stable main"
    APT_REPO_OPTIONS="arch=${HOST_ARCH}"
    PRETTY_NAME="Vivaldi"
    WEBSITE="https://vivaldi.com/"
    SUMMARY="The most feature-packaged, customisable browser."
}

function deb_gitkraken() {
    if [ "${ACTION}" != "prettylist" ]; then
        VERSION_PUBLISHED="$(curl -s "https://help.gitkraken.com/gitkraken-client/current/" | grep 'id="version-' | head -n1 | sed -e 's/<[^>]*>//g' | cut -d' ' -f2)"
    fi
    URL="https://release.gitkraken.com/linux/gitkraken-amd64.deb"
    PRETTY_NAME="GitKraken"
    WEBSITE="https://www.gitkraken.com/invite/ieih1QR3"
    SUMMARY="Intuitive Git GUI & powerful Git CLI."
}

function deb_sejda-desktop() {
    if [ "${ACTION}" != "prettylist" ]; then
        URL="https://sejda-cdn.com/downloads/$(curl -s "https://www.sejda.com/desktop" | grep "linux:" | cut -d"'" -f2)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="Sejda PDF Desktop"
    WEBSITE="https://www.sejda.com/"
    SUMMARY="Easy, pleasant and productive PDF editor."
}

function deb_webex() {
    if [ "${ACTION}" != "prettylist" ]; then
        # Note: get version number from Release Notes
        VERSION_PUBLISHED="$(curl -s "https://help.webex.com/en-us/article/mqkve8/Webex-App-%7C-Release-notes" | grep "<p class=\"p\">Linux—" | head -n1 | cut -d'>' -f2 | cut -d'<' -f1 | sed 's/Linux—//')"
    fi
    URL="https://binaries.webex.com/WebexDesktop-Ubuntu-Official-Package/Webex.deb"
    PRETTY_NAME="Webex"
    WEBSITE="https://www.webex.com/"
    SUMMARY="Video Conferencing, Cloud Calling and Screen Sharing."
}

function deb_deadbeef() {
    if [ "${ACTION}" != "prettylist" ]; then
        local REDIR_URL="$(curl -s "https://deadbeef.sourceforge.io/download.html" | grep "amd64\.deb" | cut -d'"' -f2)"
        URL=$(unroll_url "${REDIR_URL}")
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="DeaDBeeF Player"
    WEBSITE="https://deadbeef.sourceforge.io/"
    SUMMARY="The ultimate music player"
}

function deb_dropbox() {
    ARCHS_SUPPORTED="amd64 i386"
    if [ "${ACTION}" != "prettylist" ]; then
        URL="https://linux.dropbox.com/packages/ubuntu/$(curl -s "https://linux.dropbox.com/packages/ubuntu/" | grep "${HOST_ARCH}\.deb" | sed -e 's/<[^>]*>//g' | grep -v nautilus | cut -d' ' -f1 | tail -n1)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="Dropbox"
    WEBSITE="https://www.dropbox.com/"
    SUMMARY="Securely share, store and do more with your content."
}

function deb_spotify-client() {
    if [ "${ACTION}" != "prettylist" ]; then
        # NOTE: Using direct as the latest spotify-client .deb is not in the archive Packages index.
        local VERSION_UPSTREAM="$(curl -s http://repository.spotify.com/pool/non-free/s/spotify-client/ | sed -e 's/<[^>]*>//g' | sed '/^[[:space:]]*$/d' | grep -v Index | cut -d'_' -f2 | sort -uVr | head -n1)"
        VERSION_PUBLISHED="1:${VERSION_UPSTREAM}"
        URL="http://repository.spotify.com/pool/non-free/s/spotify-client/spotify-client_${VERSION_UPSTREAM}_amd64.deb"
    fi
    PRETTY_NAME="Spotify"
    WEBSITE="https://www.spotify.com/"
    SUMMARY="Millions of songs and podcasts."
}

function deb_surfshark() {
    if [ "${ACTION}" != "prettylist" ]; then
        VERSION_PUBLISHED="$(curl -s "https://ocean.surfshark.com/debian/pool/main/s/surfshark/"  | sed -e 's/<[^>]*>//g' | sed '/^[[:space:]]*$/d' | grep "${HOST_ARCH}" | sort -r | head -n1 | awk '{print $1}' | cut -d'_' -f2)"
        URL="https://ocean.surfshark.com/debian/pool/main/s/surfshark/surfshark_${VERSION_PUBLISHED}_${HOST_ARCH}.deb"
    fi
    PRETTY_NAME="Surfshark VPN"
    WEBSITE="https://surfshark.com/"
    SUMMARY="Award-winning VPN service."
}

function deb_shutter-encoder() {
    if [ "${ACTION}" != "prettylist" ]; then
        URL="https://www.shutterencoder.com/$(curl -s "https://www.shutterencoder.com/en/thanks.html" | grep "64bits\.deb\"" | cut -d'"' -f2 | sed 's|\.\./||')"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d' ' -f3)"
    fi
    PRETTY_NAME="shutter-encoder"
    WEBSITE="https://www.shutterencoder.com/"
    SUMMARY="Professional video, audio and image coversion and encoding tool."
}

function deb_parsec() {
    URL="https://builds.parsecgaming.com/package/parsec-linux.deb"
    VERSION_PUBLISHED=""
    PRETTY_NAME="Parsec"
    WEBSITE="https://parsec.app/"
    SUMMARY="Simple, low-latency game streaming."
}

function deb_nordvpn() {
    ARCHS_SUPPORTED="amd64 arm64 armhf i386"
    if [ "${ACTION}" != "prettylist" ]; then
        VERSION_PUBLISHED=$(curl -s "https://repo.nordvpn.com/deb/nordvpn/debian/pool/main/" | sed -e 's/<[^>]*>//g' | sed '/^[[:space:]]*$/d' | grep "${HOST_ARCH}" | sort -r | head -n1 | awk '{print $1}' | cut -d'_' -f2)
        URL="https://repo.nordvpn.com/deb/nordvpn/debian/pool/main/nordvpn_${VERSION_PUBLISHED}_${HOST_ARCH}.deb"
    fi
    PRETTY_NAME="NordVPN"
    WEBSITE="https://nordvpn.com/"
    SUMMARY="VPN service for speed and security."
}

function deb_keybase() {
    ARCHS_SUPPORTED="amd64 i386"
    ASC_KEY_URL="https://keybase.io/docs/server_security/code_signing_key.asc"
    APT_LIST_NAME="keybase"
    APT_REPO_URL="https://prerelease.keybase.io/deb stable main"
    PRETTY_NAME="Keybase"
    WEBSITE="https://keybase.io/"
    SUMMARY="End-to-end encryption for things that matter. Secure messaging and file-sharing."
}

function deb_protonvpn() {
    ASC_KEY_URL="https://protonvpn.com/download/public_key.asc"
    APT_LIST_NAME="protonvpn-stable"
    APT_REPO_URL="https://repo.protonvpn.com/debian stable main"
    PRETTY_NAME="Proton VPN"
    WEBSITE="https://protonvpn.com/"
    SUMMARY="High-speed Swiss VPN that safeguards your privacy."
}

function deb_softmaker-office-2021() {
    ASC_KEY_URL="https://shop.softmaker.com/repo/linux-repo-public.key"
    APT_LIST_NAME="softmaker"
    APT_REPO_URL="https://shop.softmaker.com/repo/apt stable non-free"
    PRETTY_NAME="SoftMaker Office 2021"
    WEBSITE="https://www.softmaker.com/en/softmaker-office"
    SUMMARY="Create impressive documents with ease."
}

function deb_resilio-sync() {
    ASC_KEY_URL="https://linux-packages.resilio.com/resilio-sync/key.asc"
    APT_LIST_NAME="resilio-sync"
    APT_REPO_URL="https://linux-packages.resilio.com/resilio-sync/deb resilio-sync non-free"
    PRETTY_NAME="Resilio Sync"
    WEBSITE="https://www.resilio.com/"
    SUMMARY="Fast, reliable, and simple file sync and share solution, powered by P2P technology"
}

function deb_zoom() {
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(unroll_url "https://zoom.us/client/latest/zoom_amd64.deb")
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f5)"
    fi
    PRETTY_NAME="Zoom"
    WEBSITE="https://zoom.us/"
    SUMMARY="Video Conferencing, Cloud Phone, Webinars, Chat, Virtual Events."
}

function deb_azuredatastudio() {
    get_github_releases "https://api.github.com/repos/microsoft/azuredatastudio/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        local REDIR_URL="$(grep -o "\[linux-deb\]:.*linkid=[0-9]*" "${CACHE_DIR}/${APP}.json" | cut -d' ' -f2)"
        URL=$(unroll_url "${REDIR_URL}")
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'-' -f3 | sed 's/\.deb//')"
    fi
    PRETTY_NAME="Azure Data Studio"
    WEBSITE="https://docs.microsoft.com/en-us/sql/azure-data-studio/"
    SUMMARY="Data management tool for working with SQL Server, Azure SQL DB and SQL DW."
}

function deb_exodus() {
    if [ "${ACTION}" != "prettylist" ]; then
        VERSION_PUBLISHED="$(curl -s https://www.exodus.com/download/|sed "s|.*https://downloads\.exodus\.com/releases/hashes-exodus-||"|sed "s/\.txt.*//")"
        URL="https://downloads.exodus.com/releases/exodus-linux-x64-${VERSION_PUBLISHED}.deb"
    fi
    PRETTY_NAME="Exodus"
    WEBSITE="https://exodus.com/"
    SUMMARY="Bitcoin & Crypto Wallet."
}

function deb_jabref() {
    get_github_releases "https://api.github.com/repos/jabref/jabref/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="JabRef"
    WEBSITE="https://www.jabref.org/"
    SUMMARY="The efficient way to collect, organize & discover."
}

function deb_draw.io() {
    get_github_releases "https://api.github.com/repos/jgraph/drawio-desktop/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(grep "browser_download_url.*\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 | tr -d v)"
    fi
    PRETTY_NAME="draw.io"
    WEBSITE="https://www.diagrams.net"
    SUMMARY="Diagramming and whiteboarding app that wraps the core draw.io editor."
}

function deb_gh() {
    ARCHS_SUPPORTED="amd64 arm64"
    get_github_releases "https://api.github.com/repos/cli/cli/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="GitHub CLI"
    WEBSITE="https://cli.github.com/"
    SUMMARY="GitHub CLI brings GitHub to your terminal. Free and open source."
}

function deb_chronograf() {
    ARCHS_SUPPORTED="amd64 arm64 armhf i386"
    ASC_KEY_URL="https://repos.influxdata.com/influxdb.key"
    APT_LIST_NAME="influxdata"
    APT_REPO_URL="https://repos.influxdata.com/debian stable main"
    PRETTY_NAME="Chronograf"
    WEBSITE="https://www.influxdata.com/time-series-platform/chronograf/"
    SUMMARY="Open source monitoring and visualization UI for the TICK stack."
}

function deb_influxdb() {
    ARCHS_SUPPORTED="amd64 arm64 armhf i386"
    ASC_KEY_URL="https://repos.influxdata.com/influxdb.key"
    APT_LIST_NAME="influxdata"
    APT_REPO_URL="https://repos.influxdata.com/debian stable main"
    PRETTY_NAME="InfluxDB"
    WEBSITE="https://www.influxdata.com/products/influxdb-overview/"
    SUMMARY="Scalable datastore for metrics, events, and real-time analytics."
}

function deb_influxdb2() {
    ARCHS_SUPPORTED="amd64 arm64"
    ASC_KEY_URL="https://repos.influxdata.com/influxdb.key"
    APT_LIST_NAME="influxdata"
    APT_REPO_URL="https://repos.influxdata.com/debian stable main"
    PRETTY_NAME="InfluxDB2"
    WEBSITE="https://www.influxdata.com/products/influxdb-overview/"
    SUMMARY="Scalable datastore for metrics, events, and real-time analytics."
}

function deb_influxdb2-cli() {
    ARCHS_SUPPORTED="amd64 arm64"
    ASC_KEY_URL="https://repos.influxdata.com/influxdb.key"
    APT_LIST_NAME="influxdata"
    APT_REPO_URL="https://repos.influxdata.com/debian stable main"
    PRETTY_NAME="InfluxDB2 CLI"
    WEBSITE="https://www.influxdata.com/products/influxdb-overview/"
    SUMMARY="CLI for managing resources in InfluxDB v2"
}

function deb_kapacitor() {
    ARCHS_SUPPORTED="amd64 arm64"
    ASC_KEY_URL="https://repos.influxdata.com/influxdb.key"
    APT_LIST_NAME="influxdata"
    APT_REPO_URL="https://repos.influxdata.com/debian stable main"
    PRETTY_NAME="Kapacitor"
    WEBSITE="https://github.com/influxdata/kapacitor"
    SUMMARY="Open source framework for processing, monitoring, and alerting on time series data."
}

function deb_telegraf() {
    ARCHS_SUPPORTED="amd64 arm64 armhf i386"
    ASC_KEY_URL="https://repos.influxdata.com/influxdb.key"
    APT_LIST_NAME="influxdata"
    APT_REPO_URL="https://repos.influxdata.com/debian stable main"
    PRETTY_NAME="Telegraf"
    WEBSITE="https://github.com/influxdata/telegraf"
    SUMMARY="The plugin-driven server agent for collecting & reporting metrics."
}

function deb_brisqi() {
    get_github_releases "https://api.github.com/repos/Brisqi/releases/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 | tr -d v)"
    fi
    PRETTY_NAME="Brisqi"
    WEBSITE="https://brisqi.com/"
    SUMMARY="An offline-first personal Kanban app."
}

function deb_teamviewer() {
    if [ "${ACTION}" != "prettylist" ]; then
        VERSION_PUBLISHED="$(curl -s 'https://www.teamviewer.com/en/download/linux/' | grep -C 5 'Ubuntu, Debian' | grep '\*\.deb package' | cut -d ' ' -f3 | sed 's/\([0-9\.]*\).*$/\1/')"
    fi
    URL="https://download.teamviewer.com/download/linux/teamviewer_amd64.deb"
    PRETTY_NAME="TeamViewer"
    WEBSITE="https://www.teamviewer.com/"
    SUMMARY="The Remote Desktop Software."
}

function deb_anydesk() {
    ASC_KEY_URL="https://keys.anydesk.com/repos/DEB-GPG-KEY"
    APT_LIST_NAME="anydesk-stable"
    APT_REPO_URL="http://deb.anydesk.com/ all main"
    PRETTY_NAME="AnyDesk"
    WEBSITE="https://anydesk.com/"
    SUMMARY="Access any device at any time. From anywhere. Always secure and fast."
}

function deb_lutris() {
    PPA="ppa:lutris-team/lutris"
    PRETTY_NAME="Lutris"
    WEBSITE="https://lutris.net/"
    SUMMARY="Open Gaming Platform."
}

function deb_polychromatic() {
    PPA="ppa:polychromatic/stable"
    PRETTY_NAME="Polychromatic"
    WEBSITE="https://polychromatic.app/"
    SUMMARY="Frontend for OpenRazer that enables Razer devices to control lighting effects and more."
}

function deb_openrazer-meta() {
    PPA="ppa:openrazer/stable"
    PRETTY_NAME="OpenRazer"
    WEBSITE="https://openrazer.github.io/"
    SUMMARY="Open source driver and user-space daemon that allows you to manage Razer peripherals."
}

function deb_strawberry() {
    PPA="ppa:jonaski/strawberry"
    PRETTY_NAME="Strawberry Music Player"
    WEBSITE="https://www.strawberrymusicplayer.org/"
    SUMMARY="Music player and music collection organizer aimed at music collectors and audiophiles."
}


function deb_azure-cli() {
    # TODO: Test with Debian
    ASC_KEY_URL="https://packages.microsoft.com/keys/microsoft.asc"
    APT_LIST_NAME="azure-cli"
    APT_REPO_URL="https://packages.microsoft.com/repos/azure-cli/ ${UPSTREAM_CODENAME} main"
    APT_REPO_OPTIONS="arch=amd64"
    PRETTY_NAME="Azure CLI"
    WEBSITE="https://docs.microsoft.com/en-us/cli/azure/install-azure-cli"
    SUMMARY="Command-line interface used to create and manage Azure resources."
}

function deb_zotero() {
    GPG_KEY_URL="https://raw.githubusercontent.com/retorquere/zotero-deb/master/zotero-archive-keyring.gpg"
    APT_LIST_NAME="zotero"
    APT_REPO_URL="https://zotero.retorque.re/file/apt-package-archive ./"
    APT_REPO_OPTIONS="by-hash=force"
    PRETTY_NAME="Zotero"
    WEBSITE="https://www.zotero.org/"
    SUMMARY="A free, easy-to-use tool to help you collect, organize, cite, and share research."
}

function deb_terraform() {
    ASC_KEY_URL="https://apt.releases.hashicorp.com/gpg"
    APT_LIST_NAME="terraform"
    APT_REPO_URL="https://apt.releases.hashicorp.com ${UPSTREAM_CODENAME} main"
    APT_REPO_OPTIONS="arch=${HOST_ARCH}"
    PRETTY_NAME="Terraform"
    WEBSITE="https://www.terraform.io/"
    SUMMARY="Automate Infrastructure on Any Cloud."
}

function deb_nomad() {
    ASC_KEY_URL="https://apt.releases.hashicorp.com/gpg"
    APT_LIST_NAME="nomad"
    APT_REPO_URL="https://apt.releases.hashicorp.com ${UPSTREAM_CODENAME} main"
    APT_REPO_OPTIONS="arch=${HOST_ARCH}"
    PRETTY_NAME="Nomad"
    WEBSITE="https://www.nomadproject.io/"
    SUMMARY="Orchestration tool for deploying and managing applications."
}

function deb_tailscale() {
    # TODO: Test with Debian
    GPG_KEY_URL="https://pkgs.tailscale.com/stable/${UPSTREAM_ID}/${UPSTREAM_CODENAME}.noarmor.gpg"
    APT_LIST_NAME="tailscale"
    APT_REPO_URL="https://pkgs.tailscale.com/stable/${UPSTREAM_ID} ${UPSTREAM_CODENAME} main"
    PRETTY_NAME="Tailscale"
    WEBSITE="https://tailscale.com/"
    SUMMARY="Zero config VPN. Works on any device, manages firewall rules for you, and works from anywhere."
}

function deb_portmaster() {
    if [ "${ACTION}" != "prettylist" ]; then
        VERSION_PUBLISHED="$(curl -s https://api.github.com/repos/safing/portmaster/releases/latest | grep -E '"name":' | tr -d "\"," | cut -d: -f2 | tr -d " v")"
    fi
    URL="https://updates.safing.io/latest/linux_amd64/packages/portmaster-installer.deb"
    PRETTY_NAME="Portmaster"
    WEBSITE="https://safing.io/portmaster/"
    SUMMARY="Portmaster is a free and open-source application that puts you back in charge over all your computer's network connections."
}

function deb_vuescan() {
    ARCHS_SUPPORTED="amd64 arm64 i386"
    if [ "${ACTION}" != "prettylist" ]; then
        local ARCH_VER
        case ${HOST_ARCH} in
            amd64)   ARCH_VER=x64;;
            aarch64) ARCH_VER=a64;;
            i386)    ARCH_VER=x32;;
        esac
        VERSION_PUBLISHED="$(curl -s https://www.hamrick.com/alternate-versions.html | grep '<a href="files/vue'${ARCH_VER}'.*\.deb">.*</a>' | head -n 1 | cut -d'>' -f2 | cut -d'<' -f1).0-0"
        local MAJOR_VER="$(echo ${VERSION_PUBLISHED} | cut -d'.' -f1)"
        local MINOR_VER="$(echo ${VERSION_PUBLISHED} | cut -d'.' -f2)"
        URL="https://www.hamrick.com/files/vue${ARCH_VER}${MAJOR_VER}${MINOR_VER}.deb"
    fi
    PRETTY_NAME="VueScan"
    WEBSITE="https://www.hamrick.com/"
    SUMMARY="Scanner Software that supports over 6500 scanners."
}

function deb_hyper() {
    ARCHS_SUPPORTED="amd64 arm64"
    get_github_releases "https://api.github.com/repos/vercel/hyper/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | grep -v canary | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="Hyper"
    WEBSITE="https://hyper.is/"
    SUMMARY="A terminal built on web technologies."
}

function deb_p3x-onenote() {
    get_github_releases "https://api.github.com/repos/patrikx3/onenote/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="P3X OneNote"
    WEBSITE="https://www.corifeus.com/onenote"
    SUMMARY="A Linux compatible version of OneNote."
}

function deb_ms-office-electron() {
    get_github_releases "https://api.github.com/repos/agam778/MS-Office-Electron/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 | tr -d v)"
    fi
    PRETTY_NAME="Office 365"
    WEBSITE="https://agam778.github.io/MS-Office-Electron/"
    SUMMARY="A Microsoft Office Online Desktop Client made with Electron."
}

function deb_geforcenow-electron() {
    get_github_releases "https://api.github.com/repos/hmlendea/gfn-electron/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="GeForce NOW"
    WEBSITE="https://github.com/hmlendea/gfn-electron"
    SUMMARY="Desktop client for Nvidia's GeForce NOW game streaming service."
}

function deb_zettlr() {
    ARCHS_SUPPORTED="amd64 arm64"
    get_github_releases "https://api.github.com/repos/Zettlr/Zettlr/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 | tr -d v)"
    fi
    PRETTY_NAME="Zettlr"
    WEBSITE="https://www.zettlr.com/"
    SUMMARY="A Markdown Editor for the 21st century."
}

function deb_ksnip() {
    get_github_releases "https://api.github.com/repos/ksnip/ksnip/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 | tr -d v)"
    fi
    PRETTY_NAME="ksnip"
    WEBSITE="https://github.com/ksnip/ksnip"
    SUMMARY="Cross-platform screenshot and annotation tool."
}

function deb_tidal-hifi() {
    get_github_releases "https://api.github.com/repos/Mastermindzh/tidal-hifi/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="Tidal-hifi"
    WEBSITE="https://github.com/Mastermindzh/tidal-hifi"
    SUMMARY="Web version of listen.tidal.com running in Wlectron with hifi support thanks to widevine."
}

function deb_dustracing2d() {
    get_github_releases "https://api.github.com/repos/juzzlin/DustRacing2D/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | grep "18\.04" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8)"
    fi
    PRETTY_NAME="DustRacing2D"
    WEBSITE="https://juzzlin.github.io/DustRacing2D/index.html"
    SUMMARY="Dust Racing 2D is a traditional top-down car racing game including a level editor."
}

function deb_obs-cli() {
    ARCHS_SUPPORTED="amd64 arm64 armhf"
    get_github_releases "https://api.github.com/repos/muesli/obs-cli/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="OBS-cli"
    WEBSITE="https://github.com/muesli/obs-cli"
    SUMMARY="OBS-cli is a command-line remote control for OBS."
}

function deb_google-chat-electron() {
    get_github_releases "https://api.github.com/repos/ankurk91/google-chat-electron/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="Google Chat"
    WEBSITE="https://github.com/ankurk91/google-chat-electron"
    SUMMARY="An unofficial desktop app for Google Chat."
}

function deb_expressvpn() {
    ARCHS_SUPPORTED="amd64 i386 armhf"
    if [ "${ACTION}" != "prettylist" ]; then
        VERSION_PUBLISHED="$(curl -s "https://www.expressvpn.com/latest#linux" | grep -o 'value="https://www\.expressvpn\.works/clients/linux/expressvpn_.*'${HOST_ARCH}'\.deb"' | cut -d"_" -f2)"
        URL="https://www.expressvpn.works/clients/linux/expressvpn_${VERSION_PUBLISHED}_${HOST_ARCH}.deb"
    fi
    PRETTY_NAME="Expressvpn"
    WEBSITE="https://www.expressvpn.com/"
    SUMMARY="Popular VPN software"
}

function deb_blockbench() {
    get_github_releases "https://api.github.com/repos/JannisX11/blockbench/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(grep "browser_download_url.*\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 | tr -d v)"
    fi
    PRETTY_NAME="Blockbench"
    WEBSITE="https://www.blockbench.net/"
    SUMMARY="A low-poly 3D model editor"
}

function deb_copyq() {
    PPA="ppa:hluk/copyq"
    PRETTY_NAME="CopyQ"
    WEBSITE="https://hluk.github.io/CopyQ/"
    SUMMARY="An advanced clipboard manager with editing and scripting features."
}

function deb_dbeaver-ce() {
    ARCHS_SUPPORTED="amd64 i386"
    if [ "${ACTION}" != "prettylist" ]; then
        VERSION_PUBLISHED="$(curl -s https://dbeaver.io/debs/dbeaver-ce/ | grep -o '"dbeaver-ce_.*'${HOST_ARCH}'\.deb"' | sort --version-sort | tail -n1 | cut -d"_" -f2)"
        URL="https://dbeaver.io/debs/dbeaver-ce/dbeaver-ce_${VERSION_PUBLISHED}_${HOST_ARCH}.deb"
    fi
    PRETTY_NAME="DBeaver"
    WEBSITE="https://dbeaver.io/"
    SUMMARY="Database GUI Client"
}

function deb_obs-studio() {
    PPA="ppa:flexiondotorg/obs-fully-loaded"
    PRETTY_NAME="OBS Studio (Fully Loaded)"
    WEBSITE="https://obsproject.com/"
    SUMMARY="Free and open source software for video recording and live streaming."
}

function deb_foliate() {
    PPA="ppa:apandada1/foliate"
    PRETTY_NAME="Foliate"
    WEBSITE="https://johnfactotum.github.io/foliate/"
    SUMMARY="A simple and modern eBook viewer for Linux desktops."
}

function deb_rustdesk() {
    ARCHS_SUPPORTED="amd64 armhf"
    get_github_releases "https://api.github.com/repos/rustdesk/rustdesk/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        case "${HOST_ARCH}" in
            amd64) URL="$(grep "browser_download_url.*\.deb\"" "${CACHE_DIR}/${APP}.json" | grep -Ev "$(echo ${ARCHS_SUPPORTED} | tr " " "|")" | head -n1 | cut -d'"' -f4)"
            ;;
            *) URL="$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)"
            ;;
        esac
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8)"
    fi
    PRETTY_NAME="RustDesk"
    WEBSITE="https://rustdesk.com/"
    SUMMARY="Open source virtual / remote desktop infrastructure for everyone!"
}

function deb_picocrypt() {
    get_github_releases "https://api.github.com/repos/HACKERALERT/Picocrypt/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(grep "browser_download_url.*\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8)"
    fi
    PRETTY_NAME="Picocrypt"
    WEBSITE="https://github.com/HACKERALERT/Picocrypt/"
    SUMMARY="A very small, very simple, yet very secure encryption tool."
}

function deb_ulauncher() {
    PPA="ppa:agornostal/ulauncher"
    PRETTY_NAME="Ulauncher"
    WEBSITE="https://ulauncher.io/"
    SUMMARY="Application launcher for Linux."
}

function deb_battery-monitor() {
    get_github_releases "https://api.github.com/repos/hsbasu/battery-monitor/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(grep "browser_download_url.*\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8)"
    fi
    PRETTY_NAME="Battery Monitor"
    WEBSITE="https://github.com/hsbasu/battery-monitor/"
    SUMMARY="An X-platform utility tool developed on Python, notifies about charging, discharging, and critically low battery state of the battery on laptop."
}

function deb_android-messages-desktop() {
    get_github_releases "https://api.github.com/repos/OrangeDrangon/android-messages-desktop/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 | tr -d v)"
    fi
    PRETTY_NAME="android-messages-desktop"
    WEBSITE="https://github.com/OrangeDrangon/android-messages-desktop/"
    SUMMARY="Run Android Messages as a desktop app."
}

function deb_yq() {
    PPA="ppa:rmescandon/yq"
    PRETTY_NAME="yq"
    WEBSITE="https://mikefarah.gitbook.io/yq"
    SUMMARY="A lightweight and portable command-line YAML processor."
}

function deb_youtube-music() {
    get_github_releases "https://api.github.com/repos/th-ch/youtube-music/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 | tr -d v)"
    fi
    PRETTY_NAME="youtube-music"
    WEBSITE="https://th-ch.github.io/youtube-music/"
    SUMMARY="Open source, cross-platform, unofficial YouTube Music Desktop App with built-in ad blocker and downloader."
}

function deb_minikube() {
    ARCHS_SUPPORTED="amd64 arm64 armhf ppc64el s390x"
    get_github_releases "https://api.github.com/repos/kubernetes/minikube/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(grep "browser_download_url.*minikube_.*_${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 | tr -d v)"
    fi
    PRETTY_NAME="minikube"
    WEBSITE="https://minikube.sigs.k8s.io/"
    SUMMARY="minikube quickly sets up a local Kubernetes cluster on macOS, Linux, and Windows."
}

function deb_limoji() {
    get_github_releases "https://api.github.com/repos/GEROGIANNIS/limoji/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*limoji.*_all.deb" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 | tr -d v)"
    fi
    PRETTY_NAME="limoji"
    WEBSITE="https://github.com/GEROGIANNIS/Limoji"
    SUMMARY="Turning your favorite emojis into the world of ASCII."
}

function deb_fsearch() {
    PPA="ppa:christian-boxdoerfer/fsearch-stable"
    PRETTY_NAME="FSearch"
    WEBSITE="https://github.com/cboxdoerfer/fsearch"
    SUMMARY="Fast file search utility."
}

function deb_openrgb() {
    ARCHS_SUPPORTED="amd64 i386 armhf"
    if [ "${ACTION}" != "prettylist" ]; then
        case "${UPSTREAM_CODENAME}" in
            focal)
                URL="https://openrgb.org/$(curl -s https://openrgb.org/releases.html | grep -o "\"releases/.*/openrgb_.*_${HOST_ARCH}.*buster_.*\.deb\"" | sort --version-sort | tail -n1 | cut -d "\"" -f 2)"
            ;;
            *)
                URL="https://openrgb.org/$(curl -s https://openrgb.org/releases.html | grep -o "\"releases/.*/openrgb_.*_${HOST_ARCH}.*bullseye_.*\.deb\"" | sort --version-sort | tail -n1 | cut -d "\"" -f 2)"
            ;;
        esac
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d "_" -f 3)"
    fi
    PRETTY_NAME="OpenRGB"
    WEBSITE="https://openrgb.org/"
    SUMMARY="Open source RGB lighting control that doesn't depend on manufacturer software."
}

function deb_mergerfs() {
    ARCHS_SUPPORTED="amd64 arm64 armhf"
    get_github_releases "https://api.github.com/repos/trapexit/mergerfs/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        CODENAMES_SUPPORTED=$(grep "browser_download_url.*.deb" "${CACHE_DIR}/${APP}.json" | grep "${HOST_ARCH}" | cut -d'-' -f2 | cut -d'_' -f1 | tr '\n' ' ')
        URL="$(grep "browser_download_url.*.deb" "${CACHE_DIR}/${APP}.json" | grep "${UPSTREAM_CODENAME}_${HOST_ARCH}" | cut -d'"' -f4)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d _ -f2 | sed -E "s/([0-9])\\.([a-z])/\1~\2/")"
    fi
    PRETTY_NAME="mergerfs"
    WEBSITE="https://github.com/trapexit/mergerfs"
    SUMMARY="A featureful union filesystem."
}

function deb_openaudible() {
    get_github_releases "https://api.github.com/repos/openaudible/openaudible/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(grep "browser_download_url.*x86_64\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)"
        VERSION_PUBLISHED="$(echo ${URL} | cut -d'_' -f2)"
    fi
    PRETTY_NAME="OpenAudible"
    WEBSITE="https://github.com/openaudible/openaudible"
    SUMMARY="A cross-platform desktop application for downloading and managing your Audible audiobooks."
}

function deb_deltachat-desktop() {
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(curl -s "$(unroll_url https://delta.chat/download)" | grep "\.deb\"" | cut -d "\"" -f 2)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d "/" -f 5 | tr -d v)"
    fi
    PRETTY_NAME="Delta Chat"
    WEBSITE="https://delta.chat/"
    SUMMARY="Email-based instant messaging for Desktop."
}

function deb_bitwig-studio() {
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(unroll_url "$(curl -s "https://www.bitwig.com/download/" | grep -o "https://www\.bitwig\.com/dl/?id=[^&]*&amp;os=installer_linux")")"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d "/" -f 4)"
    fi
    PRETTY_NAME="BitWig Studio"
    WEBSITE="https://www.bitwig.com/"
    SUMMARY="Modern music production and performance."
}

function deb_sleek() {
    get_github_releases "https://api.github.com/repos/ransome1/sleek/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*\.deb\"" "${CACHE_DIR}/${APP}.json" | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 | tr -d v)"
    fi
    PRETTY_NAME="Sleek"
    WEBSITE="https://github.com/ransome1/sleek"
    SUMMARY="Todo manager based on the todo.txt syntax for Linux, free and open-source (FOSS)."
}

function deb_kopia-ui() {
    ASC_KEY_URL="https://kopia.io/signing-key"
    APT_LIST_NAME="kopia"
    APT_REPO_URL="https://packages.kopia.io/apt/ stable main"
    PRETTY_NAME="KopiaUI"
    WEBSITE="https://kopia.io/"
    SUMMARY="Cross-platform backup tool for Windows, macOS & Linux with fast, incremental backups, client-side end-to-end encryption, compression and data deduplication."
}

function deb_typora() {
    ASC_KEY_URL="https://typora.io/linux/public-key.asc"
    APT_LIST_NAME="typora"
    APT_REPO_URL="https://typora.io/linux ./"
    PRETTY_NAME="Typora"
    WEBSITE="https://typora.io/"
    SUMMARY="A minimal Markdown editor and reader."
}

function deb_kdiskmark() {
    PPA="ppa:jonmagon/kdiskmark"
    PRETTY_NAME="KDiskMark"
    WEBSITE="https://github.com/JonMagon/KDiskMark"
    SUMMARY="A simple open-source disk benchmark tool for Linux distros."
}

function deb_xemu() {
    PPA="ppa:mborgerson/xemu"
    PRETTY_NAME="Xemu"
    WEBSITE="https://xemu.app/"
    SUMMARY="A free and open-source application that emulates the original Microsoft Xbox game console, enabling people to play their original Xbox games on Windows, macOS, and Linux systems."
}

function deb_cryptomator() {
    PPA="ppa:sebastian-stenzel/cryptomator"
    PRETTY_NAME="Cryptomator"
    WEBSITE="https://cryptomator.org/"
    SUMMARY="Multi-platform transparent client-side encryption of your files in the cloud."
}

function deb_gpu-viewer() {
    PPA="ppa:arunsivaraman/gpuviewer"
    PRETTY_NAME="GPU-Viewer"
    WEBSITE="https://github.com/arunsivaramanneo/GPU-Viewer"
    SUMMARY="A front-end to glxinfo, vulkaninfo, clinfo and es2_info."
}

function deb_stremio() {
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(curl -s https://www.stremio.com/downloads | grep -o "dl-linux-four-deb.*amd64\.deb\"" | cut -d "\"" -f 3)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d "_" -f 2)"
    fi
    PRETTY_NAME="Stremio"
    WEBSITE="https://www.stremio.com/"
    SUMMARY="Watch videos, movies, TV series and TV channels instantly."
}

function deb_standard-notes() {
    ARCHS_SUPPORTED="amd64 i386 arm64"
    get_github_releases "https://api.github.com/repos/standardnotes/app/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)"
        local VERSION_TMP="${URL##*/standard-notes-}"
        VERSION_PUBLISHED="${VERSION_TMP%%-linux*}"
    fi
    PRETTY_NAME="Standard Notes"
    WEBSITE="https://standardnotes.com"
    SUMMARY="Standard Notes is an end-to-end encrypted note-taking app for digitalists and professionals. Capture your notes, files, and life’s work all in one secure place."
}

function deb_crossover() {
    if [ "${ACTION}" != "prettylist" ]; then
        local VERSION_NAME="$(curl -s "https://media.codeweavers.com/pub/crossover/cxlinux/demo/?V=1;O=D;F=0;P=crossover_*.deb"| grep "\.deb\"" | head -n1 | cut -d"\"" -f 2)"
        VERSION_PUBLISHED="${VERSION_NAME:10:-4}"
        URL="https://media.codeweavers.com/pub/crossover/cxlinux/demo/${VERSION_NAME}"
    fi
    PRETTY_NAME="CrossOver"
    WEBSITE="https://www.codeweavers.com/crossover"
    SUMMARY="Run your Windows apps on Linux! CrossOver is a Microsoft Windows compatibility layer based on Wine."
}

function deb_motrix() {
    get_github_releases "https://api.github.com/repos/agalwood/Motrix/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*\.deb\"" "${CACHE_DIR}/${APP}.json" | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 | tr -d v)"
    fi
    PRETTY_NAME="Motrix"
    WEBSITE="https://motrix.app/"
    SUMMARY="A full-featured download manager."
}

function deb_librewolf() {
    CODENAMES_SUPPORTED="bullseye focal impish jammy"
    GPG_KEY_URL="https://deb.librewolf.net/keyring.gpg"
    APT_LIST_NAME="librewolf"
    APT_REPO_URL="https://deb.librewolf.net ${UPSTREAM_CODENAME} main"
    APT_REPO_OPTIONS="arch=amd64"
    PRETTY_NAME="LibreWolf"
    WEBSITE="https://librewolf.net/"
    SUMMARY="An independent fork of Firefox, with the primary goals of privacy, security and user freedom."
}

function deb_blanket() {
    PPA="ppa:apandada1/blanket"
    PRETTY_NAME="Blanket"
    WEBSITE="https://github.com/rafaelmardojai/blanket"
    SUMMARY="Improve focus and increase your productivity by listening to different sounds. Or allows you to fall asleep in a noisy environment."
}

function deb_bluejeans-v2() {
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(curl -s "$(unroll_url https://www.bluejeans.com/downloads)" | grep "BlueJeans_.*\.deb\"" | head -n1 | cut -d"\"" -f 2)"
        local VERSION_TMP="${URL##*/BlueJeans_}"
        VERSION_PUBLISHED="${VERSION_TMP%%.deb}"
    fi
    PRETTY_NAME="BlueJeans Desktop App"
    WEBSITE="https://www.bluejeans.com"
    SUMMARY="The secure video conferencing platform that makes you more productive."
}

function deb_flameshot() {
    get_github_releases "https://api.github.com/repos/flameshot-org/flameshot/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(grep "browser_download_url.*\.${UPSTREAM_ID}-${UPSTREAM_RELEASE}\.${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)"
        local VERSION_TMP="${URL##*/flameshot-}"
        VERSION_PUBLISHED="${VERSION_TMP%%[-.]ubuntu*}"
    fi
    PRETTY_NAME="Flameshot"
    WEBSITE="https://flameshot.org/"
    SUMMARY="Flameshot is a free and open-source, cross-platform tool to take screenshots with many built-in features to save you time."
}

function deb_notable() {
    get_github_releases "https://api.github.com/repos/notable/notable/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*\.deb\"" "${CACHE_DIR}/${APP}.json" | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 | tr -d v)"
    fi
    PRETTY_NAME="Notable"
    WEBSITE="https://notable.app/"
    SUMMARY="The Markdown-based note-taking app that doesn't suck."
}

function deb_protonmail-bridge() {
    get_github_releases "https://api.github.com/repos/ProtonMail/proton-bridge/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*\.deb\"" "${CACHE_DIR}/${APP}.json" | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 | tr -d v)"
    fi
    PRETTY_NAME="Proton Mail Bridge"
    WEBSITE="https://proton.me/mail/bridge"
    SUMMARY="Proton Mail Bridge adds end-to-end encryption to popular email apps, including Outlook, Thunderbird, and Apple Mail."
}

function deb_audio-recorder() {
    PPA="ppa:audio-recorder/ppa"
    PRETTY_NAME="Audio-Recorder"
    WEBSITE="https://launchpad.net/~audio-recorder"
    SUMMARY="Audio recording app that allows for the recording from various sources such as microphones, a system's sound card, or a web browser, and save it to various possible formats."
}

function deb_papirus-icon-theme() {
    PPA="ppa:papirus/papirus"
    PRETTY_NAME="Papirus Icon Theme"
    WEBSITE="https://github.com/PapirusDevelopmentTeam/papirus-icon-theme"
    SUMMARY="A free and open source SVG icon theme for Linux. Papirus weaves a beautiful visual cohesiveness over an ever-growing coverage of icons."
}

function deb_appimagelauncher() {
    OLD_PPA="ppa:appimagelauncher-team/stable"
    ARCHS_SUPPORTED="amd64 i386 armhf arm64"
    get_github_releases "https://api.github.com/repos/TheAssassin/AppImageLauncher/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | grep -v xenial | head -n1 | cut -d '"' -f4)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d '_' -f2 | cut -d '-' -f1)"
    fi
    PRETTY_NAME="AppImage Launcher"
    WEBSITE="https://github.com/TheAssassin/AppImageLauncher"
    SUMMARY="A free and open source MIT licensed app that makes your Linux desktop AppImage ready. Integrate AppImages to your application launcher with one click, and manage, update and remove them from there."
}

function deb_mullvad-vpn() {
    get_github_releases "https://api.github.com/repos/mullvad/mullvadvpn-app/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*\.deb\"" "${CACHE_DIR}/${APP}.json" | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 | tr -d v)"
    fi
    PRETTY_NAME="Mullvad VPN Client"
    WEBSITE="https://mullvad.net/"
    SUMMARY="VPN Service based in Sweden that does not collect user data."
}

function deb_soundux() {
    get_github_releases "https://api.github.com/repos/Soundux/Soundux/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*.deb" "${CACHE_DIR}/${APP}.json" | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 | tr -d v)"
    fi
    PRETTY_NAME="Soundux Soundboard"
    WEBSITE="https://soundux.rocks"
    SUMMARY="Soundux is a cross-platform soundboard compatible with both Pulseaudio and Pipewire. It has a universal architecture and works with a variety of applications such as Discord, Steam, and more."
}

function deb_neo4j() {
    ARCHS_SUPPORTED="amd64"
    ASC_KEY_URL="https://debian.neo4j.com/neotechnology.gpg.key"
    APT_LIST_NAME="neo4j"
    APT_REPO_URL="https://debian.neo4j.com stable latest"
    PRETTY_NAME="Neo4j"
    WEBSITE="https://neo4j.com/"
    SUMMARY="The Graph Data Platform for Today's Intelligent Applications."
}

function deb_qownnotes() {
    PPA="ppa:pbek/qownnotes"
    PRETTY_NAME="qownnotes"
    WEBSITE="https://www.qownnotes.org"
    SUMMARY="Free open source plain-text file markdown note-taking with Nextcloud / ownCloud integration."
}

function deb_pulse-sms() {
    get_github_releases "https://api.github.com/repos/maplemedia/pulse-sms-desktop/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*.deb" "${CACHE_DIR}/${APP}.json" | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 | tr -d v)"
    fi
    PRETTY_NAME="PulseSMS Desktop Client"
    WEBSITE="https://maplemedia.io/apps/"
    SUMMARY="A desktop client for Pulse SMS"
}

function deb_plow() {
    ARCHS_SUPPORTED="amd64 arm64"
    get_github_releases "https://api.github.com/repos/six-ddc/plow/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="Plow"
    WEBSITE="https://github.com/six-ddc/plow"
    SUMMARY="A high-performance HTTP benchmarking tool with real-time web UI and terminal displaying"
}

function deb_retroarch() {
    PPA="ppa:libretro/stable"
    PRETTY_NAME="Retro Arch"
    WEBSITE="https://www.retroarch.com/"
    SUMMARY="RetroArch is a frontend for emulators, game engines and media players."
}

function deb_texworks() {
    PPA="ppa:texworks/stable"
    PRETTY_NAME="TeXworks"
    WEBSITE="https://tug.org/texworks/"
    SUMMARY="Lowering the entry barrier to the TeX world."
}

function deb_lens() {
    ARCHS_SUPPORTED="amd64"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(curl -s https://docs.k8slens.dev/main/getting-started/install-lens/ | grep amd64.deb | cut -d'"' -f2)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'"' -f2 | cut -d"-" -f2)"
    fi
    PRETTY_NAME="Lens"
    WEBSITE="https://k8slens.dev/"
    SUMMARY="The way the world runs Kubernetes."
}

function deb_quarto() {
    ARCHS_SUPPORTED="amd64"
    get_github_releases "https://api.github.com/repos/quarto-dev/quarto-cli/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 | sed 's/v//')"
    fi
    PRETTY_NAME="Quarto CLI"
    WEBSITE="https://quarto.org/"
    SUMMARY="Quarto - an open-source scientific and technical publishing system built on Pandoc"
}

function deb_weylus() {
    get_github_releases "https://api.github.com/repos/H-M-H/Weylus/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="Weylus"
    WEBSITE="https://github.com/H-M-H/Weylus"
    SUMMARY="Turn your tablet or smart phone into a graphic tablet/touch screen for your computer."
}

function deb_neovim() {
    ARCHS_SUPPORTED="amd64"
    get_github_releases "https://api.github.com/repos/neovim/neovim/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*nvim-linux64\.deb[^.]" "${CACHE_DIR}/${APP}.json" | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 | tr -d v)"
    fi
    PRETTY_NAME="Neovim"
    WEBSITE="https://neovim.io/"
    SUMMARY="Hyperextensible Vim-based text editor"
}

function deb_smartgit() {
    ARCHS_SUPPORTED="amd64"
    if [ "${ACTION}" != "prettylist" ]; then
        URL="https://www.syntevo.com$(curl -s "https://www.syntevo.com/smartgit/download/" | grep "\.deb" | head -n1 | cut -d'"' -f2)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'-' -f2 | cut -d'.' -f1 | tr '_' '.')"
    fi
    PRETTY_NAME="SmartGit"
    WEBSITE="https://www.syntevo.com/"
    SUMMARY="A graphical Git client with support for pull requests for GitHub and Bitbucket."
}

function deb_google-cloud-cli() {
    GPG_KEY_URL="https://packages.cloud.google.com/apt/doc/apt-key.gpg"
    APT_LIST_NAME="google-cloud-cli"
    APT_REPO_URL="https://packages.cloud.google.com/apt cloud-sdk main"
    PRETTY_NAME="Google Cloud SDK"
    WEBSITE="https://cloud.google.com/sdk"
    SUMMARY="The Google Cloud CLI is a set of tools to create and manage Google Cloud resources. You can use these tools to perform many common platform tasks from the command line or through scripts and other automation."
}

function deb_cosign() {
    ARCHS_SUPPORTED="amd64 arm64 armhf ppc64el s390x"
    get_github_releases "https://api.github.com/repos/sigstore/cosign/releases/latest"
    if [ "${ACTION}" != "prettylist" ]; then
        URL="$(grep "browser_download_url.*${HOST_ARCH}\.deb\"" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)"
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'_' -f2)"
    fi
    PRETTY_NAME="Cosign"
    WEBSITE="https://github.com/sigstore/cosign"
    SUMMARY="Container Signing, Verification and Storage in an OCI registry."
}

function deb_vagrant() {
    ARCHS_SUPPORTED="amd64"
    CODENAMES_SUPPORTED="buster bullseye focal jammy"
    ASC_KEY_URL="https://apt.releases.hashicorp.com/gpg"
    APT_LIST_NAME="hashicorp"
    APT_REPO_URL="https://apt.releases.hashicorp.com ${UPSTREAM_CODENAME} main"
    PRETTY_NAME="Vagrant"
    WEBSITE="https://www.vagrantup.com/"
    SUMMARY="Building and maintaining virtual software development environments."
}

function deb_tabby-terminal() {
    ARCHS_SUPPORTED="amd64"
    get_github_releases "https://api.github.com/repos/Eugeny/tabby/releases"
    if [ "${ACTION}" != "prettylist" ]; then
        URL=$(grep "browser_download_url.*-linux-x64\.deb" "${CACHE_DIR}/${APP}.json" | head -n1 | cut -d'"' -f4)
        VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f8 )"
        VERSION_PUBLISHED=${VERSION_PUBLISHED/v}
    fi
    PRETTY_NAME="Tabby"
    WEBSITE="https://tabby.sh/"
    SUMMARY="A terminal for the modern age"
}

# Create an array to track those deb_ functions being loaded by this script
readonly DEB_GET_APPS=($(declare -F | grep deb_ | sed 's|declare -f deb_||g' | sort))

# Load any extra deb_ functions in /etc/deb-get.d/**/*, and also create ${INCLUDE_APPS[@]} array
load_etc_includes

# Create an array to track any duplicated conflicting / overriden deb_ functions
readonly APP_CONFLICTS=($(echo ${DEB_GET_APPS[@]} ${INCLUDE_APPS[@]} | tr ' ' '\n' | sort | uniq --repeated))

# Remove list of APP_CONFLICTS from INCLUDE_APPS array, so each list can be handled seperately
for DEB_FUNC in "${APP_CONFLICTS[@]}"; do
    INCLUDE_APPS=(${INCLUDE_APPS[@]//*$DEB_FUNC*})
done
# Conflict detection all finished

# Now create the final array of all loaded / merged deb_ functions
readonly APPS=($(declare -F | grep deb_ | sed 's|declare -f deb_||g' | sort))
export CACHE_DIR="/var/cache/deb-get"

function create_cache_dir() {
    if [ -d /var/cache/get-deb ]; then
        ${ELEVATE} mv /var/cache/get-deb "${CACHE_DIR}"
    fi
    ${ELEVATE} mkdir -p "${CACHE_DIR}" 2>/dev/null
    ${ELEVATE} chmod 755 "${CACHE_DIR}" 2>/dev/null
}

if ((BASH_VERSINFO[0] < 4)); then
    fancy_message fatal "Sorry, you need bash 4.0 or newer to run $(basename ${0})."
fi

if ! command -v lsb_release 1>/dev/null; then
  fancy_message fatal "lsb_release not detected. Quitting."
fi

export HOST_CPU="$(uname -m)"
case ${HOST_CPU} in
  aarch64|armv7l|x86_64) export HOST_ARCH="$(dpkg --print-architecture)";;
  *) fancy_message fatal "${HOST_CPU} is not supported. Quitting.";;
esac

readonly USER_AGENT="Mozilla/5.0 (X11; Linux ${HOST_CPU}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36"
readonly USER_HOME="${HOME}"

OS_ID=$(lsb_release --id --short)
case "${OS_ID}" in
  Debian) OS_ID_PRETTY="Debian";;
  Linuxmint) OS_ID_PRETTY="Linux Mint";;
  Neon) OS_ID_PRETTY="KDE Neon";;
  Pop) OS_ID_PRETTY="Pop!_OS";;
  Ubuntu) OS_ID_PRETTY="Ubuntu";;
  Zorin) OS_ID_PRETTY="Zorin OS";;
  *)
    OS_ID_PRETTY="${OS_ID}"
    fancy_message warn "${OS_ID} is not supported."
  ;;
esac

OS_CODENAME=$(lsb_release --codename --short)

if [ -e /etc/os-release ]; then
    OS_RELEASE=/etc/os-release
elif [ -e /usr/lib/os-release ]; then
    OS_RELEASE=/usr/lib/os-release
else
    fancy_message fatal "os-release not found. Quitting"
fi

UPSTREAM_ID="$(grep "^ID=" ${OS_RELEASE} | cut -d'=' -f2)"

# Fallback to ID_LIKE if ID was not 'ubuntu' or 'debian'
if [ "${UPSTREAM_ID}" != ubuntu ] && [ "${UPSTREAM_ID}" != debian ]; then
    UPSTREAM_ID_LIKE="$(grep "^ID_LIKE=" ${OS_RELEASE} | cut -d'=' -f2 | cut -d \" -f 2)"

    if [[ " ${UPSTREAM_ID_LIKE} " =~ " ubuntu " ]]; then
        UPSTREAM_ID=ubuntu
    elif [[ " ${UPSTREAM_ID_LIKE} " =~ " debian " ]]; then
        UPSTREAM_ID=debian
    else
        fancy_message fatal "${OS_ID_PRETTY} ${OS_CODENAME^} is not supported because it is not derived from a supported Debian or Ubuntu release."
    fi
fi

UPSTREAM_CODENAME=$(grep "^UBUNTU_CODENAME=" ${OS_RELEASE} | cut -d'=' -f2)

if [ -z "${UPSTREAM_CODENAME}" ]; then
    UPSTREAM_CODENAME=$(grep "^DEBIAN_CODENAME=" ${OS_RELEASE} | cut -d'=' -f2)
fi

if [ -z "${UPSTREAM_CODENAME}" ]; then
    UPSTREAM_CODENAME=$(grep "^VERSION_CODENAME=" ${OS_RELEASE} | cut -d'=' -f2)
fi

# Debian 12+
if [ -z "${UPSTREAM_CODENAME}" ] && [ -e /etc/debian_version ]; then
    UPSTREAM_CODENAME=$(cut -d / -f 1 /etc/debian_version)
fi

case "${UPSTREAM_CODENAME}" in
    buster)   UPSTREAM_RELEASE="10";;
    bullseye) UPSTREAM_RELEASE="11";;
    bookworm) UPSTREAM_RELEASE="12";;
    sid)      UPSTREAM_RELEASE="unstable";;
    focal)    UPSTREAM_RELEASE="20.04";;
    impish)   UPSTREAM_RELEASE="21.10";;
    jammy)    UPSTREAM_RELEASE="22.04";;
    kinetic)  UPSTREAM_RELEASE="22.10";;
    *) fancy_message fatal "${OS_ID_PRETTY} ${OS_CODENAME^} is not supported because it is not derived from a supported Debian or Ubuntu release.";;
esac

if [ -n "${1}" ]; then
    ACTION="${1,,}"
    shift
else
    fancy_message error "You must specify an action."
    usage >&2
    exit 1
fi

case ${ACTION} in
    install|reinstall|remove|purge|show)
        if [ -z "${1}" ]; then
            fancy_message error "You must specify an app:\n"
            list_debs >&2
            exit 1
        fi
        print_etc_overrides;;
esac

export ELEVATE=""

case "${ACTION}" in
    cache)
        ls -lh "${CACHE_DIR}/";;
    clean)
        elevate_privs
        ${ELEVATE} rm -fv "${CACHE_DIR}"/*.deb
        ${ELEVATE} rm -fv "${CACHE_DIR}"/*.json;;
    show)
        for APP in "${@,,}"; do
            validate_deb "${APP}"
            info_deb
        done;;
    install|reinstall)
        elevate_privs
        create_cache_dir
        for APP in "${@,,}"; do
            validate_deb "${APP}"
            if [[ "${ARCHS_SUPPORTED}" != *"${HOST_ARCH}"* ]]; then
                fancy_message fatal "${APP} is not supported on ${HOST_ARCH}."
            fi

            if [ -n "${CODENAMES_SUPPORTED}" ] && ! [[ "${CODENAMES_SUPPORTED[*]}" =~ "${UPSTREAM_CODENAME}" ]]; then
                fancy_message fatal "${APP} is not supported on ${OS_ID_PRETTY} ${UPSTREAM_CODENAME^}."
            fi

            if [ "${METHOD}" = "ppa" ] && [ "${UPSTREAM_ID}" != "ubuntu" ]; then
                fancy_message fatal "${APP} cannot be installed as PPAs are not supported on distros that are not derived from Ubuntu."
            fi

            case ${METHOD} in
                direct|github|website) install_deb "${URL}";;
                apt) install_apt;;
                ppa) install_ppa;;
            esac
        done;;
    list)
        list_debs;;
    pretty_list|prettylist)
        ACTION="prettylist"
        prettylist_debs;;
    csv_list|csvlist|csv)
        ACTION="prettylist"
        csvlist_debs;;
    purge)
        elevate_privs
        for APP in "${@,,}"; do
            validate_deb "${APP}"
            remove_deb "${APP}" purge
        done;;
    remove)
        elevate_privs
        for APP in "${@,,}"; do
            validate_deb "${APP}"
            remove_deb "${APP}"
        done;;
    search)
        list_debs | grep "${1}";;
    update)
        elevate_privs
        create_cache_dir
        update_debs;;
    upgrade)
        elevate_privs
        create_cache_dir
        upgrade_debs;;
    fix-installed)
        if [ -n "${1}" ] && [ "${1}" != --old-apps ]; then
            fancy_message fatal "Unknown option supplied: ${1}"
        fi
        elevate_privs
        for APP in "${APPS[@]}"; do
            if package_is_installed "${APP}"; then
                validate_deb "${APP}"
                fix_installed "${1}"
            fi
        done;;
    version) echo "${VERSION}";;
    help) usage;;
    *) fancy_message fatal "Unknown action supplied: ${ACTION}";;
esac

if [[ $PACKAGE_INSTALLATION_COUNT -lt $PACKAGE_INSTALLATION_TRIES ]]; then
    exit 1
fi
